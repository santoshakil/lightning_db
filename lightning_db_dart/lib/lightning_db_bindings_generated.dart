// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/lightning_db_ffi.h`.
class LightningDbBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LightningDbBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LightningDbBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int lightning_db_init() {
    return _lightning_db_init();
  }

  late final _lightning_db_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('lightning_db_init');
  late final _lightning_db_init =
      _lightning_db_initPtr.asFunction<int Function()>();

  void _force_enum_inclusion(
    ErrorCode _error_code,
    ConsistencyLevel _consistency_level,
    WalSyncMode _wal_sync_mode,
    CompressionType _compression_type,
  ) {
    return __force_enum_inclusion(
      _error_code.value,
      _consistency_level.value,
      _wal_sync_mode.value,
      _compression_type.value,
    );
  }

  late final __force_enum_inclusionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('_force_enum_inclusion');
  late final __force_enum_inclusion =
      __force_enum_inclusionPtr.asFunction<void Function(int, int, int, int)>();

  /// Get the last error message
  ///
  /// # Safety
  /// - The returned pointer is valid until the next call to any function that sets an error
  /// - The caller must not free the returned pointer
  ffi.Pointer<ffi.Char> lightning_db_get_last_error() {
    return _lightning_db_get_last_error();
  }

  late final _lightning_db_get_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'lightning_db_get_last_error');
  late final _lightning_db_get_last_error = _lightning_db_get_last_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Get the last error message and copy it to a buffer
  ///
  /// # Safety
  /// - buffer must be valid for buffer_len bytes
  /// - Returns the number of bytes written (excluding null terminator)
  int lightning_db_get_last_error_buffer(
    ffi.Pointer<ffi.Char> buffer,
    int buffer_len,
  ) {
    return _lightning_db_get_last_error_buffer(
      buffer,
      buffer_len,
    );
  }

  late final _lightning_db_get_last_error_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.UintPtr)>>('lightning_db_get_last_error_buffer');
  late final _lightning_db_get_last_error_buffer =
      _lightning_db_get_last_error_bufferPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  /// Clear the last error
  void lightning_db_clear_error() {
    return _lightning_db_clear_error();
  }

  late final _lightning_db_clear_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'lightning_db_clear_error');
  late final _lightning_db_clear_error =
      _lightning_db_clear_errorPtr.asFunction<void Function()>();

  /// Create a new Lightning DB database
  ///
  /// # Safety
  /// - path must be a valid null-terminated UTF-8 string
  /// - Returns 0 on success with handle stored in out_handle, error code on failure
  int lightning_db_create(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint64> out_handle,
  ) {
    return _lightning_db_create(
      path,
      out_handle,
    );
  }

  late final _lightning_db_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('lightning_db_create');
  late final _lightning_db_create = _lightning_db_createPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  /// Open an existing Lightning DB database
  ///
  /// # Safety
  /// - path must be a valid null-terminated UTF-8 string
  /// - Returns 0 on success with handle stored in out_handle, error code on failure
  int lightning_db_open(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint64> out_handle,
  ) {
    return _lightning_db_open(
      path,
      out_handle,
    );
  }

  late final _lightning_db_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('lightning_db_open');
  late final _lightning_db_open = _lightning_db_openPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  /// Create a database with custom configuration
  ///
  /// # Safety
  /// - path must be a valid null-terminated UTF-8 string
  /// - Returns 0 on success with handle stored in out_handle, error code on failure
  int lightning_db_create_with_config(
    ffi.Pointer<ffi.Char> path,
    int cache_size,
    CompressionType compression_type,
    WalSyncMode wal_sync_mode,
    ffi.Pointer<ffi.Uint64> out_handle,
  ) {
    return _lightning_db_create_with_config(
      path,
      cache_size,
      compression_type.value,
      wal_sync_mode.value,
      out_handle,
    );
  }

  late final _lightning_db_create_with_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Uint64,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Uint64>)>>('lightning_db_create_with_config');
  late final _lightning_db_create_with_config =
      _lightning_db_create_with_configPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Uint64>)>();

  /// Close a database and free its resources
  ///
  /// # Safety
  /// - The handle must be valid
  /// - The handle must not be used after calling this function
  int lightning_db_close(
    int handle,
  ) {
    return _lightning_db_close(
      handle,
    );
  }

  late final _lightning_db_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_close');
  late final _lightning_db_close =
      _lightning_db_closePtr.asFunction<int Function(int)>();

  /// Put a key-value pair into the database
  ///
  /// # Safety
  /// - key must be valid for key_len bytes
  /// - value must be valid for value_len bytes
  int lightning_db_put(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    ffi.Pointer<ffi.Uint8> value,
    int value_len,
  ) {
    return _lightning_db_put(
      handle,
      key,
      key_len,
      value,
      value_len,
    );
  }

  late final _lightning_db_putPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>>('lightning_db_put');
  late final _lightning_db_put = _lightning_db_putPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Get a value from the database
  ///
  /// # Safety
  /// - key must be valid for key_len bytes
  /// - The returned ByteResult must be freed using lightning_db_free_bytes
  ByteResult lightning_db_get(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _lightning_db_get(
      handle,
      key,
      key_len,
    );
  }

  late final _lightning_db_getPtr = _lookup<
      ffi.NativeFunction<
          ByteResult Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>>('lightning_db_get');
  late final _lightning_db_get = _lightning_db_getPtr
      .asFunction<ByteResult Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Delete a key from the database
  ///
  /// # Safety
  /// - key must be valid for key_len bytes
  /// - Returns 0 on success (key deleted), 1 if key not found, negative on error
  int lightning_db_delete(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _lightning_db_delete(
      handle,
      key,
      key_len,
    );
  }

  late final _lightning_db_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>>('lightning_db_delete');
  late final _lightning_db_delete = _lightning_db_deletePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Sync the database to disk
  ///
  /// # Safety
  /// - The handle must be valid
  int lightning_db_sync(
    int handle,
  ) {
    return _lightning_db_sync(
      handle,
    );
  }

  late final _lightning_db_syncPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_sync');
  late final _lightning_db_sync =
      _lightning_db_syncPtr.asFunction<int Function(int)>();

  /// Checkpoint the database
  ///
  /// # Safety
  /// - The handle must be valid
  int lightning_db_checkpoint(
    int handle,
  ) {
    return _lightning_db_checkpoint(
      handle,
    );
  }

  late final _lightning_db_checkpointPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_checkpoint');
  late final _lightning_db_checkpoint =
      _lightning_db_checkpointPtr.asFunction<int Function(int)>();

  /// Put with consistency level
  ///
  /// # Safety
  /// - key must be valid for key_len bytes
  /// - value must be valid for value_len bytes
  int lightning_db_put_with_consistency(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    ffi.Pointer<ffi.Uint8> value,
    int value_len,
    ConsistencyLevel consistency,
  ) {
    return _lightning_db_put_with_consistency(
      handle,
      key,
      key_len,
      value,
      value_len,
      consistency.value,
    );
  }

  late final _lightning_db_put_with_consistencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.UnsignedInt)>>('lightning_db_put_with_consistency');
  late final _lightning_db_put_with_consistency =
      _lightning_db_put_with_consistencyPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
              int, int)>();

  /// Get with consistency level
  ///
  /// # Safety
  /// - key must be valid for key_len bytes
  /// - The returned ByteResult must be freed using lightning_db_free_bytes
  ByteResult lightning_db_get_with_consistency(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    ConsistencyLevel consistency,
  ) {
    return _lightning_db_get_with_consistency(
      handle,
      key,
      key_len,
      consistency.value,
    );
  }

  late final _lightning_db_get_with_consistencyPtr = _lookup<
      ffi.NativeFunction<
          ByteResult Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr,
              ffi.UnsignedInt)>>('lightning_db_get_with_consistency');
  late final _lightning_db_get_with_consistency =
      _lightning_db_get_with_consistencyPtr.asFunction<
          ByteResult Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  /// Create an iterator for scanning a range of keys
  ///
  /// # Safety
  /// - start_key/end_key must be valid for their respective lengths (can be null for unbounded)
  /// - Returns 0 on success with iterator handle stored in out_handle, error code on failure
  int lightning_db_scan(
    int db_handle,
    ffi.Pointer<ffi.Uint8> start_key,
    int start_key_len,
    ffi.Pointer<ffi.Uint8> end_key,
    int end_key_len,
    ffi.Pointer<ffi.Uint64> out_handle,
  ) {
    return _lightning_db_scan(
      db_handle,
      start_key,
      start_key_len,
      end_key,
      end_key_len,
      out_handle,
    );
  }

  late final _lightning_db_scanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint64>)>>('lightning_db_scan');
  late final _lightning_db_scan = _lightning_db_scanPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          int, ffi.Pointer<ffi.Uint64>)>();

  /// Get the next key-value pair from an iterator
  ///
  /// # Safety
  /// - The iterator handle must be valid
  /// - The returned KeyValueResult must be freed using lightning_db_free_key_value
  KeyValueResult lightning_db_iterator_next(
    int iter_handle,
  ) {
    return _lightning_db_iterator_next(
      iter_handle,
    );
  }

  late final _lightning_db_iterator_nextPtr =
      _lookup<ffi.NativeFunction<KeyValueResult Function(ffi.Uint64)>>(
          'lightning_db_iterator_next');
  late final _lightning_db_iterator_next =
      _lightning_db_iterator_nextPtr.asFunction<KeyValueResult Function(int)>();

  /// Close an iterator and free its resources
  ///
  /// # Safety
  /// - The handle must be valid
  /// - The handle must not be used after calling this function
  int lightning_db_iterator_close(
    int iter_handle,
  ) {
    return _lightning_db_iterator_close(
      iter_handle,
    );
  }

  late final _lightning_db_iterator_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_iterator_close');
  late final _lightning_db_iterator_close =
      _lightning_db_iterator_closePtr.asFunction<int Function(int)>();

  /// Free a key-value result
  ///
  /// # Safety
  /// - The result must have been returned by lightning_db_iterator_next
  /// - The result must not be used after calling this function
  void lightning_db_free_key_value(
    KeyValueResult result,
  ) {
    return _lightning_db_free_key_value(
      result,
    );
  }

  late final _lightning_db_free_key_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KeyValueResult)>>(
          'lightning_db_free_key_value');
  late final _lightning_db_free_key_value = _lightning_db_free_key_valuePtr
      .asFunction<void Function(KeyValueResult)>();

  /// Begin a new transaction
  ///
  /// # Safety
  /// - The database handle must be valid
  /// - Returns 0 on success with transaction handle stored in out_handle, error code on failure
  int lightning_db_begin_transaction(
    int db_handle,
    ffi.Pointer<ffi.Uint64> out_handle,
  ) {
    return _lightning_db_begin_transaction(
      db_handle,
      out_handle,
    );
  }

  late final _lightning_db_begin_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64,
              ffi.Pointer<ffi.Uint64>)>>('lightning_db_begin_transaction');
  late final _lightning_db_begin_transaction =
      _lightning_db_begin_transactionPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Uint64>)>();

  /// Commit a transaction
  ///
  /// # Safety
  /// - The transaction handle must be valid
  /// - The handle must not be used after calling this function
  int lightning_db_commit_transaction(
    int tx_handle,
  ) {
    return _lightning_db_commit_transaction(
      tx_handle,
    );
  }

  late final _lightning_db_commit_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_commit_transaction');
  late final _lightning_db_commit_transaction =
      _lightning_db_commit_transactionPtr.asFunction<int Function(int)>();

  /// Abort a transaction
  ///
  /// # Safety
  /// - The transaction handle must be valid
  /// - The handle must not be used after calling this function
  int lightning_db_abort_transaction(
    int tx_handle,
  ) {
    return _lightning_db_abort_transaction(
      tx_handle,
    );
  }

  late final _lightning_db_abort_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_abort_transaction');
  late final _lightning_db_abort_transaction =
      _lightning_db_abort_transactionPtr.asFunction<int Function(int)>();

  /// Put a key-value pair within a transaction
  ///
  /// # Safety
  /// - key must be valid for key_len bytes
  /// - value must be valid for value_len bytes
  int lightning_db_put_tx(
    int tx_handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    ffi.Pointer<ffi.Uint8> value,
    int value_len,
  ) {
    return _lightning_db_put_tx(
      tx_handle,
      key,
      key_len,
      value,
      value_len,
    );
  }

  late final _lightning_db_put_txPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>>('lightning_db_put_tx');
  late final _lightning_db_put_tx = _lightning_db_put_txPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Get a value within a transaction
  ///
  /// # Safety
  /// - key must be valid for key_len bytes
  /// - The returned ByteResult must be freed using lightning_db_free_bytes
  ByteResult lightning_db_get_tx(
    int tx_handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _lightning_db_get_tx(
      tx_handle,
      key,
      key_len,
    );
  }

  late final _lightning_db_get_txPtr = _lookup<
      ffi.NativeFunction<
          ByteResult Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>>('lightning_db_get_tx');
  late final _lightning_db_get_tx = _lightning_db_get_txPtr
      .asFunction<ByteResult Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Delete a key within a transaction
  ///
  /// # Safety
  /// - key must be valid for key_len bytes
  int lightning_db_delete_tx(
    int tx_handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _lightning_db_delete_tx(
      tx_handle,
      key,
      key_len,
    );
  }

  late final _lightning_db_delete_txPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>>('lightning_db_delete_tx');
  late final _lightning_db_delete_tx = _lightning_db_delete_txPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Free a string allocated by this library
  ///
  /// # Safety
  /// - The pointer must have been allocated by this library
  /// - The pointer must not be used after calling this function
  void lightning_db_free_string(
    ffi.Pointer<ffi.Char> ptr,
  ) {
    return _lightning_db_free_string(
      ptr,
    );
  }

  late final _lightning_db_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'lightning_db_free_string');
  late final _lightning_db_free_string = _lightning_db_free_stringPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// Free bytes allocated by this library
  ///
  /// # Safety
  /// - The pointer must have been allocated by this library with the given length
  /// - The pointer must not be used after calling this function
  void lightning_db_free_bytes(
    ffi.Pointer<ffi.Uint8> ptr,
    int len,
  ) {
    return _lightning_db_free_bytes(
      ptr,
      len,
    );
  }

  late final _lightning_db_free_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>>('lightning_db_free_bytes');
  late final _lightning_db_free_bytes = _lightning_db_free_bytesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();
}

typedef DatabaseHandle = ffi.Uint64;
typedef DartDatabaseHandle = int;
typedef TransactionHandle = ffi.Uint64;
typedef DartTransactionHandle = int;
typedef IteratorHandle = ffi.Uint64;
typedef DartIteratorHandle = int;

enum CompressionType {
  CompressionTypeNone(0),
  CompressionTypeZstd(1),
  CompressionTypeLz4(2),
  CompressionTypeSnappy(3);

  final int value;
  const CompressionType(this.value);

  static CompressionType fromValue(int value) => switch (value) {
        0 => CompressionTypeNone,
        1 => CompressionTypeZstd,
        2 => CompressionTypeLz4,
        3 => CompressionTypeSnappy,
        _ => throw ArgumentError('Unknown value for CompressionType: $value'),
      };
}

enum ConsistencyLevel {
  ConsistencyLevelEventual(0),
  ConsistencyLevelStrong(1);

  final int value;
  const ConsistencyLevel(this.value);

  static ConsistencyLevel fromValue(int value) => switch (value) {
        0 => ConsistencyLevelEventual,
        1 => ConsistencyLevelStrong,
        _ => throw ArgumentError('Unknown value for ConsistencyLevel: $value'),
      };
}

enum ErrorCode {
  ErrorCodeSuccess(0),
  ErrorCodeInvalidArgument(1),
  ErrorCodeDatabaseNotFound(2),
  ErrorCodeDatabaseExists(3),
  ErrorCodeTransactionNotFound(4),
  ErrorCodeTransactionConflict(5),
  ErrorCodeKeyNotFound(6),
  ErrorCodeIoError(7),
  ErrorCodeCorruptedData(8),
  ErrorCodeOutOfMemory(9),
  ErrorCodeUnknown(999);

  final int value;
  const ErrorCode(this.value);

  static ErrorCode fromValue(int value) => switch (value) {
        0 => ErrorCodeSuccess,
        1 => ErrorCodeInvalidArgument,
        2 => ErrorCodeDatabaseNotFound,
        3 => ErrorCodeDatabaseExists,
        4 => ErrorCodeTransactionNotFound,
        5 => ErrorCodeTransactionConflict,
        6 => ErrorCodeKeyNotFound,
        7 => ErrorCodeIoError,
        8 => ErrorCodeCorruptedData,
        9 => ErrorCodeOutOfMemory,
        999 => ErrorCodeUnknown,
        _ => throw ArgumentError('Unknown value for ErrorCode: $value'),
      };
}

enum WalSyncMode {
  WalSyncModeSync(0),
  WalSyncModePeriodic(1),
  WalSyncModeAsync(2);

  final int value;
  const WalSyncMode(this.value);

  static WalSyncMode fromValue(int value) => switch (value) {
        0 => WalSyncModeSync,
        1 => WalSyncModePeriodic,
        2 => WalSyncModeAsync,
        _ => throw ArgumentError('Unknown value for WalSyncMode: $value'),
      };
}

/// Result structure for returning data across FFI boundary
final class ByteResult extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> DATA;

  @ffi.UintPtr()
  external int LEN;

  @ffi.Int32()
  external int ERROR_CODE;
}

/// Key-value pair result for iterator
final class KeyValueResult extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> KEY;

  @ffi.UintPtr()
  external int KEY_LEN;

  external ffi.Pointer<ffi.Uint8> VALUE;

  @ffi.UintPtr()
  external int VALUE_LEN;

  @ffi.Int32()
  external int ERROR_CODE;
}
