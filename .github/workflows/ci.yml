name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, nightly]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        
    - name: Install system dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install protobuf
        
    - name: Install system dependencies
      if: matrix.os == 'windows-latest'
      run: |
        choco install protoc
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run tests (no default features)
      run: cargo test --verbose --no-default-features
    
    - name: Run tests (iOS features)
      if: matrix.os == 'macos-latest'
      run: cargo test --verbose --no-default-features --features ios

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    
    - name: Check formatting
      run: cargo fmt -- --check

  dart-analyze:
    name: Dart Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.0'
        channel: 'stable'
    
    - name: Build FFI library
      run: |
        cd lightning_db_ffi
        cargo build --release
        cd ..
    
    - name: Setup native libraries
      run: |
        # Copy Linux library
        mkdir -p packages/lightning_db_dart/linux
        cp lightning_db_ffi/target/release/liblightning_db_ffi.so packages/lightning_db_dart/linux/liblightning_db.so || true
        
        # Create dummy libraries for analysis (not execution)
        mkdir -p packages/lightning_db_dart/macos
        mkdir -p packages/lightning_db_dart/windows
        touch packages/lightning_db_dart/macos/liblightning_db.dylib
        touch packages/lightning_db_dart/windows/lightning_db.dll
    
    - name: Install dependencies
      run: |
        cd packages/lightning_db_dart
        dart pub get
        cd ../lightning_db_freezed
        dart pub get
        cd ../lightning_db
        flutter pub get
    
    - name: Analyze Dart code
      run: |
        cd packages/lightning_db_dart
        dart analyze
        cd ../lightning_db_freezed
        dart analyze
        cd ../lightning_db
        flutter analyze

  flutter-test:
    name: Flutter Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        
    - name: Install system dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install protobuf
        
    - name: Install system dependencies
      if: matrix.os == 'windows-latest'
      run: |
        choco install protoc
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.0'
        channel: 'stable'
    
    - name: Build FFI library
      run: |
        cd lightning_db_ffi
        cargo build --release
        cd ..
      shell: bash
    
    - name: Setup native libraries (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p packages/lightning_db_dart/linux
        cp lightning_db_ffi/target/release/liblightning_db_ffi.so packages/lightning_db_dart/linux/
    
    - name: Setup native libraries (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p packages/lightning_db_dart/macos
        cp lightning_db_ffi/target/release/liblightning_db_ffi.dylib packages/lightning_db_dart/macos/
    
    - name: Setup native libraries (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p packages/lightning_db_dart/windows
        cp lightning_db_ffi/target/release/lightning_db_ffi.dll packages/lightning_db_dart/windows/
      shell: bash
    
    - name: Install dependencies
      run: |
        cd packages/lightning_db/example
        flutter pub get
    
    - name: Run Flutter tests
      run: |
        cd packages/lightning_db/example
        flutter test

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: cargo bench --no-run

  ffi-test:
    name: FFI Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        
    - name: Install system dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install protobuf
        
    - name: Install system dependencies
      if: matrix.os == 'windows-latest'
      run: |
        choco install protoc
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build and test FFI
      run: |
        cd lightning_db_ffi
        cargo build --release
        cargo test --release
      shell: bash

  android-build:
    name: Android Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d
        add-to-path: true
    
    - name: Install cargo-ndk
      run: cargo install cargo-ndk
    
    - uses: Swatinem/rust-cache@v2
      with:
        key: android-build
    
    - name: Build for all Android targets
      run: |
        cargo ndk -t aarch64-linux-android build --release -p lightning_db_ffi
        cargo ndk -t armv7-linux-androideabi build --release -p lightning_db_ffi
        cargo ndk -t i686-linux-android build --release -p lightning_db_ffi
        cargo ndk -t x86_64-linux-android build --release -p lightning_db_ffi
    
    - name: Verify Android libraries
      run: |
        echo "ARM64 library:"
        ls -la target/aarch64-linux-android/release/liblightning_db_ffi.so
        echo "ARMv7 library:"
        ls -la target/armv7-linux-androideabi/release/liblightning_db_ffi.so
        echo "x86 library:"
        ls -la target/i686-linux-android/release/liblightning_db_ffi.so
        echo "x86_64 library:"
        ls -la target/x86_64-linux-android/release/liblightning_db_ffi.so
