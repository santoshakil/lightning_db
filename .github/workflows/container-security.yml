name: Container Security

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'Dockerfile*'
      - 'docker/**'
      - '.dockerignore'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'Dockerfile*'
      - 'docker/**'
      - '.dockerignore'
  schedule:
    - cron: '0 3 * * 0'  # Weekly on Sunday at 3 AM UTC
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  security-events: write
  packages: write

jobs:
  dockerfile-security:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          failure-threshold: warning

      - name: Run Hadolint on Alpine Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.alpine
          format: sarif
          output-file: hadolint-alpine-results.sarif
          failure-threshold: warning
        continue-on-error: true

      - name: Run Hadolint on Production Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Dockerfile.production
          format: sarif
          output-file: hadolint-production-results.sarif
          failure-threshold: warning
        continue-on-error: true

      - name: Upload Hadolint SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            hadolint-results.sarif
            hadolint-alpine-results.sarif
            hadolint-production-results.sarif

      - name: Dockerfile best practices check
        run: |
          echo "## Dockerfile Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for common security issues
          issues=0
          
          # Check for root user
          if grep -q "USER.*root" Dockerfile* docker/Dockerfile* 2>/dev/null; then
            echo "❌ **Running as root user detected**" >> $GITHUB_STEP_SUMMARY
            issues=$((issues + 1))
          else
            echo "✅ Not running as root user" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for latest tag usage
          if grep -q ":latest" Dockerfile* docker/Dockerfile* 2>/dev/null; then
            echo "⚠️ **Using 'latest' tag detected - consider pinning versions**" >> $GITHUB_STEP_SUMMARY
            issues=$((issues + 1))
          else
            echo "✅ Not using 'latest' tags" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for ADD instead of COPY
          if grep -q "^ADD" Dockerfile* docker/Dockerfile* 2>/dev/null; then
            echo "⚠️ **ADD instruction used - consider COPY for better security**" >> $GITHUB_STEP_SUMMARY
            issues=$((issues + 1))
          else
            echo "✅ Using COPY instead of ADD" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for package manager cache cleanup
          if grep -q "apt-get.*clean\|yum.*clean\|apk.*--no-cache" Dockerfile* docker/Dockerfile* 2>/dev/null; then
            echo "✅ Package manager cache cleanup found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Package manager cache not cleaned - increases image size**" >> $GITHUB_STEP_SUMMARY
            issues=$((issues + 1))
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total issues found:** $issues" >> $GITHUB_STEP_SUMMARY

  build-and-scan:
    name: Build and Scan Container Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile:
          - { path: "Dockerfile", name: "main" }
          - { path: "Dockerfile.alpine", name: "alpine" }
          - { path: "docker/Dockerfile.production", name: "production" }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.dockerfile.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=security-scan

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile.path }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image-${{ matrix.dockerfile.name }}.tar

      - name: Load image for scanning
        run: |
          docker load --input /tmp/image-${{ matrix.dockerfile.name }}.tar
          IMAGE_ID=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -1)
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_ID }}
          format: 'sarif'
          output: 'trivy-${{ matrix.dockerfile.name }}-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.dockerfile.name }}-results.sarif'

      - name: Run Trivy security scan (table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_ID }}
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Run Snyk container test
        if: github.actor != 'dependabot[bot]'
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.IMAGE_ID }}
          args: --severity-threshold=medium --file=${{ matrix.dockerfile.path }}

      - name: Upload Snyk results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
        continue-on-error: true

      - name: Container structure test
        run: |
          # Install container-structure-test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
          # Create test configuration
          cat > container-test-${{ matrix.dockerfile.name }}.yaml << 'EOF'
          schemaVersion: 2.0.0
          
          metadataTest:
            - name: "No root user"
              command: ["whoami"]
              expectedOutput: ["^(?!root$).*$"]
              
          commandTests:
            - name: "Lightning DB binary exists"
              command: "which"
              args: ["lightning-cli"]
              expectedOutput: ["/usr/local/bin/lightning-cli"]
              
          fileExistenceTests:
            - name: "Lightning DB binary"
              path: "/usr/local/bin/lightning-cli"
              shouldExist: true
              permissions: "-rwxr-xr-x"
              
          fileContentTests:
            - name: "Non-root user in passwd"
              path: "/etc/passwd"
              expectedContents: ["^lightning:"]
          EOF
          
          # Run structure tests
          echo "## Container Structure Test Results (${{ matrix.dockerfile.name }})" >> $GITHUB_STEP_SUMMARY
          if container-structure-test test --image ${{ env.IMAGE_ID }} --config container-test-${{ matrix.dockerfile.name }}.yaml; then
            echo "✅ All structure tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some structure tests failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Analyze image layers
        run: |
          echo "### Image Layer Analysis (${{ matrix.dockerfile.name }})" >> $GITHUB_STEP_SUMMARY
          
          # Get image size
          image_size=$(docker inspect ${{ env.IMAGE_ID }} --format='{{.Size}}' | numfmt --to=iec)
          echo "**Image size:** $image_size" >> $GITHUB_STEP_SUMMARY
          
          # Count layers
          layer_count=$(docker inspect ${{ env.IMAGE_ID }} --format='{{len .RootFS.Layers}}')
          echo "**Layer count:** $layer_count" >> $GITHUB_STEP_SUMMARY
          
          # Show layer sizes
          echo "**Layer breakdown:**" >> $GITHUB_STEP_SUMMARY
          docker history ${{ env.IMAGE_ID }} --format "table {{.Size}}\t{{.CreatedBy}}" | head -10 >> $GITHUB_STEP_SUMMARY

      - name: Security benchmarking
        run: |
          echo "### Security Benchmarking (${{ matrix.dockerfile.name }})" >> $GITHUB_STEP_SUMMARY
          
          # Check if running as non-root
          user_check=$(docker run --rm ${{ env.IMAGE_ID }} whoami || echo "root")
          if [ "$user_check" != "root" ]; then
            echo "✅ Running as non-root user: $user_check" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Running as root user" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for shell access
          shell_check=$(docker run --rm ${{ env.IMAGE_ID }} ls -la /bin/sh 2>/dev/null | wc -l || echo "0")
          if [ "$shell_check" -eq 0 ]; then
            echo "✅ No shell found (distroless/scratch-based)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Shell access available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-results-${{ matrix.dockerfile.name }}-${{ github.run_id }}
          path: |
            trivy-${{ matrix.dockerfile.name }}-results.sarif
            snyk.sarif
            container-test-${{ matrix.dockerfile.name }}.yaml
          retention-days: 30

  container-compliance:
    name: Container Compliance Check
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: CIS Docker Benchmark
        run: |
          echo "## Container Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Download and run Docker Bench Security
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          
          # Run benchmark (non-interactive)
          sudo ./docker-bench-security.sh -c container_images > ../docker-bench-results.txt 2>&1 || true
          
          cd ..
          
          # Parse results
          if grep -q "WARN" docker-bench-results.txt; then
            warnings=$(grep -c "WARN" docker-bench-results.txt)
            echo "⚠️ **$warnings warnings found in CIS Docker Benchmark**" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No CIS Docker Benchmark warnings" >> $GITHUB_STEP_SUMMARY
          fi
          
          if grep -q "INFO" docker-bench-results.txt; then
            info_count=$(grep -c "INFO" docker-bench-results.txt)
            echo "ℹ️ **$info_count informational items**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Container security policy check
        run: |
          echo "### Security Policy Compliance" >> $GITHUB_STEP_SUMMARY
          
          # Check for security policies in Dockerfiles
          policies_passed=0
          total_policies=5
          
          # Policy 1: Non-root user
          if find . -name "Dockerfile*" -exec grep -l "USER.*[^root]" {} \; | grep -q .; then
            echo "✅ Policy 1: Non-root user configured" >> $GITHUB_STEP_SUMMARY
            policies_passed=$((policies_passed + 1))
          else
            echo "❌ Policy 1: Running as root user" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Policy 2: No package manager cache
          if find . -name "Dockerfile*" -exec grep -l "rm.*cache\|clean\|--no-cache" {} \; | grep -q .; then
            echo "✅ Policy 2: Package manager cache cleaned" >> $GITHUB_STEP_SUMMARY
            policies_passed=$((policies_passed + 1))
          else
            echo "❌ Policy 2: Package manager cache not cleaned" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Policy 3: Specific base image versions
          if ! find . -name "Dockerfile*" -exec grep -l ":latest" {} \; | grep -q .; then
            echo "✅ Policy 3: Specific image versions used" >> $GITHUB_STEP_SUMMARY
            policies_passed=$((policies_passed + 1))
          else
            echo "❌ Policy 3: Using 'latest' tags" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Policy 4: COPY instead of ADD
          if ! find . -name "Dockerfile*" -exec grep -l "^ADD" {} \; | grep -q .; then
            echo "✅ Policy 4: Using COPY instead of ADD" >> $GITHUB_STEP_SUMMARY
            policies_passed=$((policies_passed + 1))
          else
            echo "❌ Policy 4: Using ADD instruction" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Policy 5: Health check configured
          if find . -name "Dockerfile*" -exec grep -l "HEALTHCHECK" {} \; | grep -q .; then
            echo "✅ Policy 5: Health check configured" >> $GITHUB_STEP_SUMMARY
            policies_passed=$((policies_passed + 1))
          else
            echo "⚠️ Policy 5: No health check configured" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Calculate compliance percentage
          compliance_percentage=$(echo "scale=1; $policies_passed * 100 / $total_policies" | bc)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Compliance Score:** $policies_passed/$total_policies ($compliance_percentage%)" >> $GITHUB_STEP_SUMMARY

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-compliance-report
          path: |
            docker-bench-results.txt
          retention-days: 30

  security-summary:
    name: Container Security Summary
    runs-on: ubuntu-latest
    needs: [dockerfile-security, build-and-scan, container-compliance]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# 🐳 Container Security Summary Report" > container_security_summary.md
          echo "" >> container_security_summary.md
          echo "**Repository:** ${{ github.repository }}" >> container_security_summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> container_security_summary.md
          echo "**Commit:** ${{ github.sha }}" >> container_security_summary.md
          echo "**Scan Date:** $(date -u)" >> container_security_summary.md
          echo "" >> container_security_summary.md
          
          echo "## Security Tools Executed:" >> container_security_summary.md
          echo "- ✅ Hadolint (Dockerfile linting)" >> container_security_summary.md
          echo "- ✅ Trivy (Vulnerability scanning)" >> container_security_summary.md
          echo "- ✅ Snyk (Container testing)" >> container_security_summary.md
          echo "- ✅ Container Structure Tests" >> container_security_summary.md
          echo "- ✅ CIS Docker Benchmark" >> container_security_summary.md
          echo "" >> container_security_summary.md
          
          echo "## Images Scanned:" >> container_security_summary.md
          echo "- Main Dockerfile" >> container_security_summary.md
          echo "- Alpine Dockerfile" >> container_security_summary.md
          echo "- Production Dockerfile" >> container_security_summary.md
          echo "" >> container_security_summary.md
          
          echo "## Key Security Findings:" >> container_security_summary.md
          echo "Please review the individual SARIF reports uploaded to GitHub Security tab for detailed vulnerability information." >> container_security_summary.md
          echo "" >> container_security_summary.md
          
          echo "## Recommendations:" >> container_security_summary.md
          echo "1. Review and address all HIGH and CRITICAL vulnerabilities" >> container_security_summary.md
          echo "2. Regularly update base images to latest security patches" >> container_security_summary.md
          echo "3. Implement container runtime security policies" >> container_security_summary.md
          echo "4. Consider using distroless or minimal base images" >> container_security_summary.md
          echo "5. Enable container image signing and verification" >> container_security_summary.md

      - name: Upload consolidated summary
        uses: actions/upload-artifact@v4
        with:
          name: container-security-summary
          path: container_security_summary.md