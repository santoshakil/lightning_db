name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      prerelease: ${{ steps.check_prerelease.outputs.prerelease }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Check if prerelease
        id: check_prerelease
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if [[ "$VERSION" == *"-"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Verify Cargo.toml version matches tag
        run: |
          CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          TAG_VERSION=${{ steps.get_version.outputs.version }}
          if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Cargo.toml version ($CARGO_VERSION) doesn't match tag version ($TAG_VERSION)"
            exit 1
          fi

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-version
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Previous tag: $PREV_TAG"
          echo "Current tag: ${{ github.ref_name }}"
          
          # Generate changelog
          {
            echo "## What's Changed"
            echo ""
            
            # Features
            features=$(git log $PREV_TAG..${{ github.ref_name }} --pretty=format:"%s" | grep -E "^feat(\(.*\))?:" || true)
            if [ -n "$features" ]; then
              echo "### 🚀 Features"
              echo "$features" | sed 's/^feat\(([^)]*)\)\?: /- /'
              echo ""
            fi
            
            # Fixes
            fixes=$(git log $PREV_TAG..${{ github.ref_name }} --pretty=format:"%s" | grep -E "^fix(\(.*\))?:" || true)
            if [ -n "$fixes" ]; then
              echo "### 🐛 Bug Fixes"
              echo "$fixes" | sed 's/^fix\(([^)]*)\)\?: /- /'
              echo ""
            fi
            
            # Performance
            perf=$(git log $PREV_TAG..${{ github.ref_name }} --pretty=format:"%s" | grep -E "^perf(\(.*\))?:" || true)
            if [ -n "$perf" ]; then
              echo "### ⚡ Performance"
              echo "$perf" | sed 's/^perf\(([^)]*)\)\?: /- /'
              echo ""
            fi
            
            # Other changes
            other=$(git log $PREV_TAG..${{ github.ref_name }} --pretty=format:"%s" | grep -vE "^(feat|fix|perf|docs|style|refactor|test|build|ci|chore|revert)(\(.*\))?:" || true)
            if [ -n "$other" ]; then
              echo "### 📝 Other Changes"
              echo "$other" | sed 's/^/- /'
              echo ""
            fi
            
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...${{ github.ref_name }}"
          } > changelog.md
          
          # Save changelog to output
          {
            echo "changelog<<EOF"
            cat changelog.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

  build-binaries:
    name: Build Release Binaries
    needs: validate-version
    uses: ./.github/workflows/build-binaries.yml

  create-release:
    name: Create GitHub Release
    needs: [validate-version, generate-changelog, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Generate checksums
        run: |
          cd artifacts
          find . -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.aar" \) | while read file; do
            sha256sum "$file" | sed 's|^\./||' >> ../checksums.txt
          done
          cd ..
          echo "Checksums:"
          cat checksums.txt
      
      - name: Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          # Lightning DB ${{ needs.validate-version.outputs.version }}
          
          ${{ needs.generate-changelog.outputs.changelog }}
          
          ## 📦 Installation
          
          ### From Source
          ```bash
          cargo install lightning_db --version ${{ needs.validate-version.outputs.version }}
          ```
          
          ### Pre-built Binaries
          
          Download the appropriate binary for your platform below and extract:
          
          #### Linux
          ```bash
          # x86_64
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/lightning_db-linux-x86_64.tar.gz | tar xz
          
          # ARM64
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/lightning_db-linux-arm64.tar.gz | tar xz
          ```
          
          #### macOS
          ```bash
          # Universal binary (works on both Intel and Apple Silicon)
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/lightning_db-macos-universal.tar.gz | tar xz
          ```
          
          #### Windows
          Download and extract the appropriate zip file from the assets below.
          
          ### Verify Installation
          ```bash
          lightning-cli --version
          ```
          
          ## 🔒 Checksums
          
          ```
          $(cat checksums.txt)
          ```
          
          ## 📚 Documentation
          
          - [API Documentation](https://docs.rs/lightning_db/${{ needs.validate-version.outputs.version }})
          - [Getting Started Guide](https://github.com/${{ github.repository }}#getting-started)
          - [Examples](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/examples)
          
          EOF
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Lightning DB ${{ needs.validate-version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.validate-version.outputs.prerelease }}
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.aar
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build Docker Images
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/lightning-db
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-version.outputs.version }}
            type=raw,value=latest,enable=${{ needs.validate-version.outputs.prerelease == 'false' }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release-artifacts:
    name: Create Additional Release Artifacts
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create installation script
        run: |
          cat > install.sh << 'SCRIPT'
          #!/bin/bash
          set -e
          
          VERSION="${1:-latest}"
          INSTALL_DIR="${2:-/usr/local/bin}"
          
          # Detect OS and architecture
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          case "$OS" in
            linux)
              case "$ARCH" in
                x86_64) PLATFORM="linux-x86_64" ;;
                aarch64) PLATFORM="linux-arm64" ;;
                armv7l) PLATFORM="linux-armv7" ;;
                i686) PLATFORM="linux-i686" ;;
                *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
              esac
              ;;
            darwin)
              PLATFORM="macos-universal"
              ;;
            freebsd)
              PLATFORM="freebsd-x86_64"
              ;;
            *)
              echo "Unsupported OS: $OS"
              exit 1
              ;;
          esac
          
          # Download and install
          if [ "$VERSION" = "latest" ]; then
            URL="https://github.com/santoshakil/lightning_db/releases/latest/download/lightning_db-${PLATFORM}.tar.gz"
          else
            URL="https://github.com/santoshakil/lightning_db/releases/download/v${VERSION}/lightning_db-${PLATFORM}.tar.gz"
          fi
          
          echo "Downloading Lightning DB from $URL..."
          curl -L "$URL" | tar xz -C "$INSTALL_DIR"
          chmod +x "$INSTALL_DIR/lightning-cli"
          
          echo "Lightning DB installed successfully!"
          lightning-cli --version
          SCRIPT
          
          chmod +x install.sh
      
      - name: Upload installation script
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./install.sh
          asset_name: install.sh
          asset_content_type: text/plain

  announce-release:
    name: Announce Release
    needs: [validate-version, create-release, build-docker]
    runs-on: ubuntu-latest
    if: needs.validate-version.outputs.prerelease == 'false'
    steps:
      - name: Create announcement
        run: |
          echo "🚀 Lightning DB ${{ needs.validate-version.outputs.version }} has been released!"
          echo ""
          echo "Download: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo "Docker: docker pull ${{ secrets.DOCKER_USERNAME }}/lightning-db:${{ needs.validate-version.outputs.version }}"