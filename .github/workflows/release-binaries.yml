name: Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Lightning DB ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            # Lightning DB ${{ steps.get_version.outputs.VERSION }}
            
            ## ðŸš€ Features
            - Ultra-fast key-value storage (20M+ ops/sec reads, 1M+ ops/sec writes)
            - ACID transactions with MVCC
            - Cross-platform support (Linux, Windows, macOS, FreeBSD)
            - Multiple architectures (x86_64, ARM64, ARMv7)
            - Compression support (Zstd, LZ4, Snappy)
            - FFI bindings for C/C++
            - Binary size <5MB
            
            ## ðŸ“¦ Downloads
            
            Download the appropriate binary for your platform below.
            
            ### Platform Support
            - **Linux**: x86_64, ARM64, ARMv7 (glibc and musl)
            - **Windows**: x86_64, i686, ARM64
            - **macOS**: x86_64 (Intel), ARM64 (Apple Silicon)
            - **FreeBSD**: x86_64
            - **WebAssembly**: wasm32-unknown-unknown
            
            ## ðŸ”§ Installation
            
            ### From Binary
            ```bash
            # Linux/macOS
            tar -xzf lightning_db-<platform>.tar.gz
            chmod +x lightning_db
            sudo mv lightning_db /usr/local/bin/
            
            # Windows
            # Extract the zip file and add to PATH
            ```
            
            ### From Source
            ```bash
            cargo install lightning_db
            ```
            
            ## ðŸ“š Documentation
            
            See the [README](https://github.com/${{ github.repository }}) for usage examples and API documentation.

  build-binaries:
    name: Build Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: lightning_db
            asset_name: lightning_db-linux-x86_64
            use_cross: false
          
          # Linux x86_64 musl (static)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: lightning_db
            asset_name: lightning_db-linux-x86_64-musl
            use_cross: true
          
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: lightning_db
            asset_name: lightning_db-linux-arm64
            use_cross: true
          
          # Linux ARM64 musl (static)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: lightning_db
            asset_name: lightning_db-linux-arm64-musl
            use_cross: true
          
          # Linux ARMv7
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            artifact_name: lightning_db
            asset_name: lightning_db-linux-armv7
            use_cross: true
          
          # Linux i686
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            artifact_name: lightning_db
            asset_name: lightning_db-linux-i686
            use_cross: true
          
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: lightning_db.exe
            asset_name: lightning_db-windows-x86_64
            use_cross: false
          
          # Windows i686
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: lightning_db.exe
            asset_name: lightning_db-windows-i686
            use_cross: false
          
          # Windows ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: lightning_db.exe
            asset_name: lightning_db-windows-arm64
            use_cross: false
          
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: lightning_db
            asset_name: lightning_db-macos-x86_64
            use_cross: false
          
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: lightning_db
            asset_name: lightning_db-macos-arm64
            use_cross: false
          
          # FreeBSD x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd
            artifact_name: lightning_db
            asset_name: lightning_db-freebsd-x86_64
            use_cross: true

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      
      - name: Install Cross
        if: matrix.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build Binary
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --bin lightning_db
          else
            cargo build --release --target ${{ matrix.target }} --bin lightning_db
          fi
        shell: bash
      
      - name: Strip Binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ -f "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" ]; then
            if command -v strip >/dev/null 2>&1; then
              strip "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" || true
            fi
          fi
        shell: bash
      
      - name: Create Archive
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "${{ matrix.asset_name }}.zip" "${{ matrix.artifact_name }}"
            echo "ASSET=${{ matrix.asset_name }}.zip" >> $GITHUB_ENV
          else
            tar czf "${{ matrix.asset_name }}.tar.gz" "${{ matrix.artifact_name }}"
            echo "ASSET=${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
          fi
        shell: bash
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  build-wasm:
    name: Build WebAssembly
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build WASM
        run: |
          cargo build --release --target wasm32-unknown-unknown --no-default-features
          
          # Create WASM package
          mkdir -p wasm-pkg
          cp target/wasm32-unknown-unknown/release/*.wasm wasm-pkg/ || true
          cp README.md wasm-pkg/
          
          # Create archive
          tar czf lightning_db-wasm32.tar.gz -C wasm-pkg .
      
      - name: Upload WASM Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./lightning_db-wasm32.tar.gz
          asset_name: lightning_db-wasm32.tar.gz
          asset_content_type: application/octet-stream

  build-universal-macos:
    name: Build Universal macOS Binary
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin
      
      - name: Build Universal Binary
        run: |
          # Build for both architectures
          cargo build --release --target x86_64-apple-darwin --bin lightning_db
          cargo build --release --target aarch64-apple-darwin --bin lightning_db
          
          # Create universal binary
          mkdir -p universal
          lipo -create \
            target/x86_64-apple-darwin/release/lightning_db \
            target/aarch64-apple-darwin/release/lightning_db \
            -output universal/lightning_db
          
          # Strip the binary
          strip universal/lightning_db
          
          # Create archive
          tar czf lightning_db-macos-universal.tar.gz -C universal lightning_db
      
      - name: Upload Universal Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./lightning_db-macos-universal.tar.gz
          asset_name: lightning_db-macos-universal.tar.gz
          asset_content_type: application/octet-stream

  build-android:
    name: Build Android Libraries
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android
      
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
          add-to-path: true
      
      - name: Install cargo-ndk
        run: cargo install cargo-ndk
      
      - name: Build Android libraries
        run: |
          cargo ndk -t aarch64-linux-android build --release -p lightning_db_ffi
          cargo ndk -t armv7-linux-androideabi build --release -p lightning_db_ffi
          cargo ndk -t i686-linux-android build --release -p lightning_db_ffi
          cargo ndk -t x86_64-linux-android build --release -p lightning_db_ffi
      
      - name: Create Android AAR
        run: |
          # Create AAR structure
          mkdir -p aar/jni/{arm64-v8a,armeabi-v7a,x86,x86_64}
          
          # Copy libraries
          cp target/aarch64-linux-android/release/liblightning_db_ffi.so aar/jni/arm64-v8a/liblightning_db.so
          cp target/armv7-linux-androideabi/release/liblightning_db_ffi.so aar/jni/armeabi-v7a/liblightning_db.so
          cp target/i686-linux-android/release/liblightning_db_ffi.so aar/jni/x86/liblightning_db.so
          cp target/x86_64-linux-android/release/liblightning_db_ffi.so aar/jni/x86_64/liblightning_db.so
          
          # Create manifest
          cat > aar/AndroidManifest.xml <<EOF
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.lightning_db.ffi">
              <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="34" />
          </manifest>
          EOF
          
          # Create empty classes.jar
          mkdir -p aar/classes
          cd aar/classes && jar cf ../classes.jar . && cd ../..
          
          # Package AAR
          cd aar && zip -r ../lightning_db-android.aar . && cd ..
      
      - name: Upload Android AAR
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./lightning_db-android.aar
          asset_name: lightning_db-android.aar
          asset_content_type: application/zip
      
      - name: Create Android libraries archive
        run: |
          mkdir -p android-libs
          cp -r target/*/release/*.so android-libs/
          tar czf lightning_db-android-libs.tar.gz android-libs/
      
      - name: Upload Android libraries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./lightning_db-android-libs.tar.gz
          asset_name: lightning_db-android-libs.tar.gz
          asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to crates.io
    needs: [build-binaries, build-android]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Publish to crates.io
        run: |
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }} || echo "Publishing skipped"
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  build-docker:
    name: Build Docker Images
    needs: create-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        if: env.DOCKER_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      
      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Create Dockerfile if missing
        run: |
          if [ ! -f Dockerfile ]; then
            cat > Dockerfile <<'EOF'
          FROM rust:1.75 as builder
          WORKDIR /app
          COPY . .
          RUN cargo build --release --bin lightning_db
          
          FROM debian:bookworm-slim
          RUN apt-get update && apt-get install -y \
              libssl3 \
              ca-certificates \
              && rm -rf /var/lib/apt/lists/*
          
          COPY --from=builder /app/target/release/lightning_db /usr/local/bin/
          
          EXPOSE 8080
          CMD ["lightning_db"]
          EOF
          fi
      
      - name: Build and push Docker image
        if: env.DOCKER_USERNAME != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/lightning-db:latest
            ${{ secrets.DOCKER_USERNAME }}/lightning-db:${{ steps.version.outputs.VERSION }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}