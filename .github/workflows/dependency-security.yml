name: Dependency Security

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '**/Cargo.toml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '**/Cargo.toml'
  schedule:
    - cron: '0 4 * * *'  # Daily at 4 AM UTC
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install security tools
        run: |
          cargo install --force cargo-audit
          cargo install --force cargo-outdated
          cargo install --force cargo-upgrades
          cargo install --force cargo-deny

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate dependency list
        run: |
          echo "## Dependency Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get total dependency count
          total_deps=$(cargo tree --format "{p}" | sort -u | wc -l)
          echo "**Total unique dependencies:** $total_deps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Check for vulnerable dependencies
        id: vuln-check
        run: |
          echo "### Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          
          # Run cargo audit with detailed output
          if cargo audit --json > audit.json 2>/dev/null; then
            vuln_count=0
            echo "✅ No known vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
          else
            vuln_count=$(cat audit.json | jq '.vulnerabilities | length' 2>/dev/null || echo "unknown")
            echo "❌ $vuln_count vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            
            # Parse and display vulnerabilities
            if [ -f audit.json ] && [ "$vuln_count" != "unknown" ] && [ "$vuln_count" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "#### Critical Vulnerabilities:" >> $GITHUB_STEP_SUMMARY
              cat audit.json | jq -r '.vulnerabilities[] | "- **\(.advisory.id)**: \(.advisory.title) (\(.advisory.severity))"' >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
            fi
          fi
          
          echo "vulnerability_count=$vuln_count" >> $GITHUB_OUTPUT

      - name: Check for outdated dependencies
        id: outdated-check
        run: |
          echo "### Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
          
          # Run cargo outdated
          if cargo outdated --format json > outdated.json 2>/dev/null; then
            outdated_count=$(cat outdated.json | jq '.dependencies | length' 2>/dev/null || echo "0")
            
            if [ "$outdated_count" = "0" ] || [ "$outdated_count" = "null" ]; then
              echo "✅ All dependencies are up to date" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ $outdated_count dependencies have newer versions available" >> $GITHUB_STEP_SUMMARY
              
              # Show top 10 outdated dependencies
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "#### Top Outdated Dependencies:" >> $GITHUB_STEP_SUMMARY
              cat outdated.json | jq -r '.dependencies[:10][] | "- **\(.name)**: \(.project) → \(.latest) (latest)"' >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
            fi
          else
            echo "⚠️ Could not check for outdated dependencies" >> $GITHUB_STEP_SUMMARY
            outdated_count="unknown"
          fi
          
          echo "outdated_count=$outdated_count" >> $GITHUB_OUTPUT

      - name: License compliance check
        id: license-check
        run: |
          echo "### License Compliance" >> $GITHUB_STEP_SUMMARY
          
          # Create cargo-deny config if not exists
          if [ ! -f deny.toml ]; then
            cat > deny.toml << 'EOF'
          [licenses]
          unlicensed = "deny"
          allow = [
            "MIT",
            "Apache-2.0", 
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
            "CC0-1.0",
            "Unlicense",
            "MPL-2.0",
          ]
          deny = ["GPL-3.0", "AGPL-3.0", "LGPL-3.0"]
          copyleft = "warn"
          confidence-threshold = 0.8
          
          [advisories]
          vulnerability = "deny"
          unmaintained = "warn"
          yanked = "deny"
          notice = "warn"
          
          [bans]
          multiple-versions = "warn"
          wildcards = "allow"
          highlight = "all"
          
          [sources]
          unknown-registry = "warn"
          unknown-git = "warn"
          allow-registry = ["https://github.com/rust-lang/crates.io-index"]
          EOF
          fi
          
          # Check licenses
          if cargo deny check licenses > license_report.txt 2>&1; then
            echo "✅ All licenses are compliant" >> $GITHUB_STEP_SUMMARY
            license_status="compliant"
          else
            echo "❌ License compliance issues found" >> $GITHUB_STEP_SUMMARY
            license_status="issues"
            
            # Show license issues
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### License Issues:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 license_report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "license_status=$license_status" >> $GITHUB_OUTPUT

      - name: Supply chain analysis
        id: supply-chain
        run: |
          echo "### Supply Chain Security" >> $GITHUB_STEP_SUMMARY
          
          # Check for yanked crates
          if cargo deny check bans > bans_report.txt 2>&1; then
            echo "✅ No banned or yanked dependencies found" >> $GITHUB_STEP_SUMMARY
            supply_chain_status="secure"
          else
            echo "⚠️ Supply chain issues detected" >> $GITHUB_STEP_SUMMARY
            supply_chain_status="issues"
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Supply Chain Issues:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -15 bans_report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for multiple versions of same crate
          duplicate_deps=$(cargo tree --duplicates | wc -l)
          echo "**Duplicate dependencies:** $duplicate_deps" >> $GITHUB_STEP_SUMMARY
          
          if [ "$duplicate_deps" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Duplicate Dependencies:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cargo tree --duplicates | head -10 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "supply_chain_status=$supply_chain_status" >> $GITHUB_OUTPUT
          echo "duplicate_count=$duplicate_deps" >> $GITHUB_OUTPUT

      - name: SBOM generation
        run: |
          echo "### Software Bill of Materials (SBOM)" >> $GITHUB_STEP_SUMMARY
          
          # Generate SBOM in various formats
          cargo tree --format "{p}" | sort -u > sbom_dependencies.txt
          
          # Create JSON SBOM
          cat > sbom.json << EOF
          {
            "bomFormat": "CycloneDX",
            "specVersion": "1.4",
            "metadata": {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "tools": [
                {
                  "vendor": "cargo",
                  "name": "cargo-tree",
                  "version": "$(cargo --version | cut -d' ' -f2)"
                }
              ],
              "component": {
                "type": "application",
                "name": "lightning_db",
                "version": "$(grep '^version' Cargo.toml | cut -d'"' -f2)"
              }
            },
            "components": []
          }
          EOF
          
          # Add dependency count to summary
          dep_count=$(wc -l < sbom_dependencies.txt)
          echo "**SBOM generated with $dep_count dependencies**" >> $GITHUB_STEP_SUMMARY

      - name: Dependency risk assessment
        id: risk-assessment
        run: |
          echo "### Risk Assessment" >> $GITHUB_STEP_SUMMARY
          
          vuln_count="${{ steps.vuln-check.outputs.vulnerability_count }}"
          outdated_count="${{ steps.outdated-check.outputs.outdated_count }}"
          license_status="${{ steps.license-check.outputs.license_status }}"
          supply_chain_status="${{ steps.supply-chain.outputs.supply_chain_status }}"
          duplicate_count="${{ steps.supply-chain.outputs.duplicate_count }}"
          
          # Calculate risk score
          risk_score=0
          
          if [ "$vuln_count" != "0" ] && [ "$vuln_count" != "unknown" ]; then
            risk_score=$((risk_score + vuln_count * 10))
          fi
          
          if [ "$outdated_count" != "0" ] && [ "$outdated_count" != "unknown" ]; then
            risk_score=$((risk_score + outdated_count / 2))
          fi
          
          if [ "$license_status" = "issues" ]; then
            risk_score=$((risk_score + 5))
          fi
          
          if [ "$supply_chain_status" = "issues" ]; then
            risk_score=$((risk_score + 15))
          fi
          
          risk_score=$((risk_score + duplicate_count))
          
          # Determine risk level
          if [ $risk_score -eq 0 ]; then
            risk_level="LOW"
            risk_emoji="🟢"
          elif [ $risk_score -le 10 ]; then
            risk_level="MEDIUM" 
            risk_emoji="🟡"
          else
            risk_level="HIGH"
            risk_emoji="🔴"
          fi
          
          echo "$risk_emoji **Overall Risk Level: $risk_level** (Score: $risk_score)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### Risk Factors:" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerabilities: $vuln_count" >> $GITHUB_STEP_SUMMARY
          echo "- Outdated dependencies: $outdated_count" >> $GITHUB_STEP_SUMMARY  
          echo "- License issues: $license_status" >> $GITHUB_STEP_SUMMARY
          echo "- Supply chain issues: $supply_chain_status" >> $GITHUB_STEP_SUMMARY
          echo "- Duplicate dependencies: $duplicate_count" >> $GITHUB_STEP_SUMMARY
          
          echo "risk_level=$risk_level" >> $GITHUB_OUTPUT
          echo "risk_score=$risk_score" >> $GITHUB_OUTPUT

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports-${{ github.run_id }}
          path: |
            audit.json
            outdated.json
            license_report.txt
            bans_report.txt
            sbom_dependencies.txt
            sbom.json
            deny.toml
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const riskLevel = '${{ steps.risk-assessment.outputs.risk_level }}';
            const riskScore = '${{ steps.risk-assessment.outputs.risk_score }}';
            const vulnCount = '${{ steps.vuln-check.outputs.vulnerability_count }}';
            const outdatedCount = '${{ steps.outdated-check.outputs.outdated_count }}';
            
            let emoji = '🟢';
            if (riskLevel === 'MEDIUM') emoji = '🟡';
            if (riskLevel === 'HIGH') emoji = '🔴';
            
            let comment = `## 📦 Dependency Security Report\n\n`;
            comment += `${emoji} **Risk Level**: ${riskLevel} (Score: ${riskScore})\n\n`;
            comment += `### Summary:\n`;
            comment += `- **Vulnerabilities**: ${vulnCount}\n`;
            comment += `- **Outdated Dependencies**: ${outdatedCount}\n`;
            comment += `- **License Status**: ${{ steps.license-check.outputs.license_status }}\n`;
            comment += `- **Supply Chain**: ${{ steps.supply-chain.outputs.supply_chain_status }}\n\n`;
            
            if (riskLevel === 'HIGH') {
              comment += `⚠️ **High risk detected!** Please review and address security issues before merging.\n\n`;
            }
            
            comment += `Full report available in the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail on high risk
        if: steps.risk-assessment.outputs.risk_level == 'HIGH'
        run: |
          echo "::error::High risk dependencies detected! Risk score: ${{ steps.risk-assessment.outputs.risk_score }}"
          echo "Please review and address security issues before proceeding."
          exit 1

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, CC0-1.0, Unlicense
          deny-licenses: GPL-3.0, AGPL-3.0, LGPL-3.0

  license-check:
    name: License Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install --force cargo-license

      - name: Generate license report
        run: |
          echo "## License Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Generate detailed license report
          cargo license --json > licenses.json
          
          # Count licenses
          license_count=$(cat licenses.json | jq 'length' 2>/dev/null || echo "unknown")
          echo "**Total licensed dependencies:** $license_count" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Group by license type
          echo "### License Distribution:" >> $GITHUB_STEP_SUMMARY
          cat licenses.json | jq -r 'group_by(.license) | .[] | "\(.length) - \(.[0].license)"' | sort -nr >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
          
          # Create CSV export
          echo "name,version,authors,license,repository" > licenses.csv
          cat licenses.json | jq -r '.[] | [.name, .version, (.authors // [""] | join(";")), (.license // "unknown"), (.repository // "")] | @csv' >> licenses.csv 2>/dev/null || true

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            licenses.json
            licenses.csv