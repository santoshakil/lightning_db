name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - integration
          - performance
          - security
          - chaos
          - all
      coverage:
        description: 'Generate coverage report'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast smoke tests for all PRs
  smoke-tests:
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config
    
    - name: Run smoke tests
      run: |
        ./scripts/run_integration_tests.sh \
          --suite smoke \
          --parallel auto \
          --junit \
          --timeout 1800
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: target/integration-test-results/
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Smoke Test Results
        path: target/integration-test-results/junit_*.xml
        reporter: java-junit

  # Comprehensive integration tests
  integration-tests:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        suite: 
          - integration
          - performance
          - security
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.suite }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config llvm
    
    - name: Install cargo-tarpaulin for coverage
      if: matrix.suite == 'integration'
      run: cargo install cargo-tarpaulin
    
    - name: Run integration tests
      run: |
        ./scripts/run_integration_tests.sh \
          --suite ${{ matrix.suite }} \
          --parallel auto \
          --junit \
          --html-report \
          ${{ matrix.suite == 'integration' && '--coverage' || '' }} \
          --timeout 5400
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.suite }}-test-results
        path: target/integration-test-results/
    
    - name: Upload coverage to Codecov
      if: matrix.suite == 'integration'
      uses: codecov/codecov-action@v4
      with:
        directory: target/integration-test-results/coverage_html
        flags: integration-tests
        name: integration-coverage
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: ${{ matrix.suite }} Test Results
        path: target/integration-test-results/junit_*.xml
        reporter: java-junit

  # Chaos engineering tests (only on schedule or manual trigger)
  chaos-tests:
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'chaos')
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-chaos-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config stress-ng
    
    - name: Set up system for chaos tests
      run: |
        # Increase file descriptor limits
        echo "* soft nofile 65536" | sudo tee -a /etc/security/limits.conf
        echo "* hard nofile 65536" | sudo tee -a /etc/security/limits.conf
        ulimit -n 65536
    
    - name: Run chaos tests
      run: |
        ./scripts/run_integration_tests.sh \
          --suite chaos \
          --parallel 1 \
          --junit \
          --html-report \
          --timeout 7200 \
          --retry 0
    
    - name: Upload chaos test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: chaos-test-results
        path: target/integration-test-results/
    
    - name: Publish chaos test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Chaos Test Results
        path: target/integration-test-results/junit_*.xml
        reporter: java-junit

  # Cross-platform compatibility tests
  cross-platform:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config
    
    - name: Run cross-platform smoke tests
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Use PowerShell script for Windows
          powershell -File scripts/run_integration_tests.ps1 -Suite smoke -Parallel auto -Timeout 1800
        else
          ./scripts/run_integration_tests.sh --suite smoke --parallel auto --timeout 1800
        fi
    
    - name: Upload cross-platform results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cross-platform-${{ matrix.os }}-results
        path: target/integration-test-results/

  # Manual test execution
  manual-tests:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 240
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-manual-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config llvm
    
    - name: Install cargo-tarpaulin for coverage
      if: github.event.inputs.coverage == 'true'
      run: cargo install cargo-tarpaulin
    
    - name: Run manual test suite
      run: |
        ./scripts/run_integration_tests.sh \
          --suite ${{ github.event.inputs.test_suite }} \
          --parallel auto \
          --junit \
          --html-report \
          ${{ github.event.inputs.coverage == 'true' && '--coverage' || '' }} \
          --timeout 7200
    
    - name: Upload manual test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: manual-${{ github.event.inputs.test_suite }}-results
        path: target/integration-test-results/
    
    - name: Publish manual test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Manual ${{ github.event.inputs.test_suite }} Test Results
        path: target/integration-test-results/junit_*.xml
        reporter: java-junit

  # Test result summary
  test-summary:
    if: always()
    needs: [smoke-tests, integration-tests, chaos-tests, cross-platform, manual-tests]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-test-results
    
    - name: Generate test summary
      run: |
        echo "# 🧪 Lightning DB Integration Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Execution Overview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count results from each job
        for job in smoke-tests integration-tests chaos-tests cross-platform manual-tests; do
          if [[ -d "all-test-results" ]]; then
            result_count=$(find all-test-results -name "*$job*" -type d | wc -l)
            if [[ $result_count -gt 0 ]]; then
              echo "- ✅ $job: $result_count result sets" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ⏭️ $job: Skipped" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts Available" >> $GITHUB_STEP_SUMMARY
        echo "- Test logs and reports" >> $GITHUB_STEP_SUMMARY
        echo "- JUnit XML files" >> $GITHUB_STEP_SUMMARY
        echo "- HTML reports" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage reports (when generated)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **View detailed results in the Actions artifacts section above.**" >> $GITHUB_STEP_SUMMARY