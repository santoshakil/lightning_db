name: CI Security Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_call:
    inputs:
      security_level:
        description: 'Security scanning level (basic/comprehensive)'
        required: false
        type: string
        default: 'basic'
      fail_on_high:
        description: 'Fail build on high severity findings'
        required: false
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      proceed: ${{ steps.gate-check.outputs.proceed }}
      security_required: ${{ steps.gate-check.outputs.security_required }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if security scanning is required
        id: gate-check
        run: |
          echo "## Security Gate Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Check if this is a security-sensitive change
          security_required="false"
          
          # Check for changes in security-sensitive files
          if git diff --name-only HEAD~1 2>/dev/null | grep -E "(Cargo\.toml|Cargo\.lock|Dockerfile|\.github/workflows|src/.*security|src/.*auth|src/.*crypto)" >/dev/null; then
            echo "🔒 Security-sensitive files changed - full security scan required" >> $GITHUB_STEP_SUMMARY
            security_required="true"
          fi
          
          # Check for security-related commits
          if git log --oneline -1 | grep -iE "(security|vuln|cve|fix)" >/dev/null; then
            echo "🔒 Security-related commit detected - full security scan required" >> $GITHUB_STEP_SUMMARY
            security_required="true"
          fi
          
          # Check if this is a PR from dependabot
          if [ "${{ github.actor }}" = "dependabot[bot]" ]; then
            echo "🤖 Dependabot PR - security scan required" >> $GITHUB_STEP_SUMMARY
            security_required="true"
          fi
          
          # For scheduled runs or manual triggers, always run
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            security_required="true"
          fi
          
          # Default security scanning for main branches
          if [[ "${{ github.ref }}" =~ ^refs/heads/(main|master|develop)$ ]]; then
            security_required="true"
          fi
          
          if [ "$security_required" = "true" ]; then
            echo "✅ Proceeding with security scanning" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ Skipping comprehensive security scan (no security-sensitive changes)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "proceed=true" >> $GITHUB_OUTPUT
          echo "security_required=$security_required" >> $GITHUB_OUTPUT

  quick-security-scan:
    name: Quick Security Scan
    needs: security-gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-quick-security-${{ hashFiles('**/Cargo.lock') }}

      - name: Quick vulnerability check
        id: quick-vuln
        run: |
          # Install cargo-audit if not cached
          if ! command -v cargo-audit &> /dev/null; then
            cargo install --force cargo-audit
          fi
          
          echo "## Quick Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          # Quick audit check
          if cargo audit --json > quick_audit.json 2>/dev/null; then
            echo "✅ No known vulnerabilities in dependencies" >> $GITHUB_STEP_SUMMARY
            echo "audit_status=pass" >> $GITHUB_OUTPUT
          else
            vuln_count=$(cat quick_audit.json | jq '.vulnerabilities | length' 2>/dev/null || echo "unknown")
            echo "❌ $vuln_count vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
            echo "audit_status=fail" >> $GITHUB_OUTPUT
          fi

      - name: Quick clippy security lints
        run: |
          echo "### Quick Clippy Security Lints" >> $GITHUB_STEP_SUMMARY
          
          # Run essential security lints only
          if cargo clippy --all-targets --all-features -- \
            -D clippy::unwrap_used \
            -D clippy::expect_used \
            -D clippy::panic \
            -D clippy::integer_overflow \
            2>/dev/null; then
            echo "✅ Essential security lints passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security lints failed - review required" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Quick secret scan
        run: |
          echo "### Quick Secret Scan" >> $GITHUB_STEP_SUMMARY
          
          # Check for obvious secrets in recent changes
          if git diff --name-only HEAD~1 2>/dev/null | xargs grep -l "password\|secret\|key\|token" 2>/dev/null | head -1 | grep -q .; then
            echo "⚠️ Potential secrets found in changed files - manual review required" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No obvious secrets in recent changes" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload quick scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quick-security-scan-${{ github.run_id }}
          path: |
            quick_audit.json
          retention-days: 7

  comprehensive-security:
    name: Comprehensive Security Scan
    needs: [security-gate, quick-security-scan]
    if: needs.security-gate.outputs.security_required == 'true'
    strategy:
      matrix:
        scan-type: ['audit', 'sast', 'dependencies', 'secrets']
      fail-fast: false
    uses: ./.github/workflows/security-audit.yml
    secrets: inherit

  security-integration-report:
    name: Security Integration Report
    needs: [security-gate, quick-security-scan, comprehensive-security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate integration summary
        run: |
          echo "# 🔒 CI Security Integration Report" > security_integration_summary.md
          echo "" >> security_integration_summary.md
          echo "**Build:** ${{ github.run_id }}" >> security_integration_summary.md
          echo "**Commit:** ${{ github.sha }}" >> security_integration_summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> security_integration_summary.md
          echo "**Triggered by:** ${{ github.event_name }}" >> security_integration_summary.md
          echo "" >> security_integration_summary.md
          
          echo "## Security Scanning Results" >> security_integration_summary.md
          echo "" >> security_integration_summary.md
          
          # Security gate results
          if [ "${{ needs.security-gate.outputs.security_required }}" = "true" ]; then
            echo "🔒 **Full Security Scan:** Required and executed" >> security_integration_summary.md
          else
            echo "⚡ **Quick Security Scan:** No security-sensitive changes detected" >> security_integration_summary.md
          fi
          
          # Quick scan results
          echo "✅ **Quick Security Scan:** Completed" >> security_integration_summary.md
          
          # Comprehensive scan status
          if [ "${{ needs.security-gate.outputs.security_required }}" = "true" ]; then
            if [ "${{ needs.comprehensive-security.result }}" = "success" ]; then
              echo "✅ **Comprehensive Security Scan:** Passed" >> security_integration_summary.md
            elif [ "${{ needs.comprehensive-security.result }}" = "failure" ]; then
              echo "❌ **Comprehensive Security Scan:** Failed" >> security_integration_summary.md
            elif [ "${{ needs.comprehensive-security.result }}" = "cancelled" ]; then
              echo "⏹️ **Comprehensive Security Scan:** Cancelled" >> security_integration_summary.md
            else
              echo "⏳ **Comprehensive Security Scan:** Skipped" >> security_integration_summary.md
            fi
          else
            echo "⏭️ **Comprehensive Security Scan:** Skipped (not required)" >> security_integration_summary.md
          fi
          
          echo "" >> security_integration_summary.md
          echo "## Next Steps" >> security_integration_summary.md
          
          if [ "${{ needs.comprehensive-security.result }}" = "failure" ]; then
            echo "1. ❌ **BLOCK DEPLOYMENT** - Security issues must be resolved" >> security_integration_summary.md
            echo "2. Review security scan results in workflow logs" >> security_integration_summary.md
            echo "3. Address all high-severity vulnerabilities" >> security_integration_summary.md
            echo "4. Re-run security scans after fixes" >> security_integration_summary.md
          else
            echo "1. ✅ Security checks passed - deployment can proceed" >> security_integration_summary.md
            echo "2. Monitor for any new security alerts" >> security_integration_summary.md
            echo "3. Review security reports in GitHub Security tab" >> security_integration_summary.md
          fi

      - name: Comment on PR with security status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const securityRequired = '${{ needs.security-gate.outputs.security_required }}' === 'true';
            const comprehensiveResult = '${{ needs.comprehensive-security.result }}';
            
            let statusEmoji = '✅';
            let statusText = 'Security checks passed';
            let deploymentStatus = 'APPROVED';
            
            if (comprehensiveResult === 'failure') {
              statusEmoji = '❌';
              statusText = 'Security issues detected';
              deploymentStatus = 'BLOCKED';
            } else if (comprehensiveResult === 'cancelled') {
              statusEmoji = '⏹️';
              statusText = 'Security scan cancelled';
              deploymentStatus = 'PENDING';
            }
            
            let comment = `## ${statusEmoji} Security Integration Status\n\n`;
            comment += `**Status:** ${statusText}\n`;
            comment += `**Deployment:** ${deploymentStatus}\n\n`;
            
            if (securityRequired) {
              comment += `### Security Scans Performed:\n`;
              comment += `- ✅ Quick security scan\n`;
              comment += `- ${comprehensiveResult === 'success' ? '✅' : comprehensiveResult === 'failure' ? '❌' : '⏹️'} Comprehensive security scan\n\n`;
            } else {
              comment += `### Security Scans Performed:\n`;
              comment += `- ✅ Quick security scan\n`;
              comment += `- ⏭️ Comprehensive scan (skipped - no security-sensitive changes)\n\n`;
            }
            
            if (deploymentStatus === 'BLOCKED') {
              comment += `### ⚠️ Action Required\n`;
              comment += `Security issues must be resolved before this PR can be merged.\n`;
              comment += `Please review the security scan results and address all findings.\n\n`;
            }
            
            comment += `### Links\n`;
            comment += `- [Security Workflow Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            comment += `- [Repository Security Tab](https://github.com/${{ github.repository }}/security)\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Set deployment gate status
        if: always()
        run: |
          if [ "${{ needs.comprehensive-security.result }}" = "failure" ]; then
            echo "::error::Security scan failed - blocking deployment"
            echo "SECURITY_GATE_STATUS=BLOCKED" >> $GITHUB_ENV
            exit 1
          else
            echo "SECURITY_GATE_STATUS=APPROVED" >> $GITHUB_ENV
            echo "::notice::Security checks passed - deployment approved"
          fi

      - name: Upload integration report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-integration-report
          path: security_integration_summary.md
          retention-days: 30