name: Dart/Flutter Tests

on:
  push:
    paths:
      - 'packages/**'
      - '.github/workflows/dart-test.yml'
  pull_request:
    paths:
      - 'packages/**'
      - '.github/workflows/dart-test.yml'

jobs:
  test-dart-packages:
    name: Test Dart Packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        package: [lightning_db_dart, lightning_db_freezed]
    steps:
    - uses: actions/checkout@v4
    
    - uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build native library
      run: |
        cargo build --release -p lightning_db_ffi
        
    - name: Setup library path
      run: |
        mkdir -p packages/${{ matrix.package }}/${{ runner.os }}
        if [ "${{ runner.os }}" == "macOS" ]; then
          cp target/release/liblightning_db_ffi.dylib packages/${{ matrix.package }}/macos/liblightning_db.dylib || true
        elif [ "${{ runner.os }}" == "Linux" ]; then
          cp target/release/liblightning_db_ffi.so packages/${{ matrix.package }}/linux/liblightning_db.so || true
        elif [ "${{ runner.os }}" == "Windows" ]; then
          cp target/release/lightning_db_ffi.dll packages/${{ matrix.package }}/windows/lightning_db.dll || true
        fi
      shell: bash
    
    - name: Install dependencies
      working-directory: packages/${{ matrix.package }}
      run: dart pub get
    
    - name: Generate code
      if: matrix.package == 'lightning_db_freezed'
      working-directory: packages/${{ matrix.package }}
      run: dart run build_runner build --delete-conflicting-outputs
    
    - name: Run tests
      working-directory: packages/${{ matrix.package }}
      run: dart test
    
    - name: Check formatting
      working-directory: packages/${{ matrix.package }}
      run: dart format --set-exit-if-changed .
    
    - name: Analyze
      working-directory: packages/${{ matrix.package }}
      run: dart analyze --fatal-warnings

  test-flutter-plugin:
    name: Test Flutter Plugin
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.0'
        channel: 'stable'
    
    - name: Install dependencies
      working-directory: packages/lightning_db
      run: flutter pub get
    
    - name: Run tests
      working-directory: packages/lightning_db
      run: flutter test
    
    - name: Check formatting
      working-directory: packages/lightning_db
      run: dart format --set-exit-if-changed .
    
    - name: Analyze
      working-directory: packages/lightning_db
      run: flutter analyze --no-fatal-warnings

  integration-test:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.0'
        channel: 'stable'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build native library
      run: |
        cargo build --release -p lightning_db_ffi
        mkdir -p packages/lightning_db_dart/${{ matrix.os }}
        mkdir -p packages/lightning_db/example/${{ matrix.os }}
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          cp target/release/liblightning_db_ffi.dylib packages/lightning_db_dart/macos/liblightning_db.dylib
          cp target/release/liblightning_db_ffi.dylib packages/lightning_db/example/macos/liblightning_db.dylib
        else
          cp target/release/liblightning_db_ffi.so packages/lightning_db_dart/linux/liblightning_db.so
          cp target/release/liblightning_db_ffi.so packages/lightning_db/example/linux/liblightning_db.so
        fi
    
    - name: Install dependencies
      working-directory: packages/lightning_db/example
      run: flutter pub get
    
    - name: Generate Freezed models
      working-directory: packages/lightning_db/example
      run: dart run build_runner build --delete-conflicting-outputs
    
    - name: Run integration tests
      working-directory: packages/lightning_db/example
      run: |
        flutter test integration_test/database_test.dart
        flutter test integration_test/freezed_integration_test.dart
        flutter test integration_test/platform_test.dart