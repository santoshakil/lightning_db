name: WASM Build

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  wasm-build:
    name: WebAssembly Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Install wasm-pack
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Install wasm-bindgen-cli
      run: cargo install wasm-bindgen-cli
    
    - uses: Swatinem/rust-cache@v2
      with:
        key: wasm-build
    
    - name: Build WASM library
      run: |
        cd lightning_db_wasm
        wasm-pack build --target web --out-dir pkg
    
    - name: Run WASM tests
      run: |
        cd lightning_db_wasm
        wasm-pack test --node
    
    - name: Build WASM for Node.js
      run: |
        cd lightning_db_wasm
        wasm-pack build --target nodejs --out-dir pkg-node
    
    - name: Build WASM for bundlers
      run: |
        cd lightning_db_wasm
        wasm-pack build --target bundler --out-dir pkg-bundler
    
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-packages
        path: |
          lightning_db_wasm/pkg/
          lightning_db_wasm/pkg-node/
          lightning_db_wasm/pkg-bundler/
          
  wasm-example:
    name: WASM Example App
    runs-on: ubuntu-latest
    needs: wasm-build
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Download WASM packages
      uses: actions/download-artifact@v4
      with:
        name: wasm-packages
        path: lightning_db_wasm/
        
    - name: Build example app
      run: |
        cd examples/wasm
        npm install
        npm run build
        
    - name: Test example app
      run: |
        cd examples/wasm
        npm test
        
  wasm-benchmarks:
    name: WASM Benchmarks
    runs-on: ubuntu-latest
    needs: wasm-build
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Download WASM packages
      uses: actions/download-artifact@v4
      with:
        name: wasm-packages
        path: lightning_db_wasm/
        
    - name: Run benchmarks
      run: |
        cd examples/wasm-benchmark
        npm install
        npm run benchmark
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: wasm-benchmark-results
        path: examples/wasm-benchmark/results/
        
  wasm-size-check:
    name: WASM Size Analysis
    runs-on: ubuntu-latest
    needs: wasm-build
    steps:
    - uses: actions/checkout@v4
    
    - name: Download WASM packages
      uses: actions/download-artifact@v4
      with:
        name: wasm-packages
        path: lightning_db_wasm/
        
    - name: Install wasm-opt
      run: |
        npm install -g wasm-opt
        
    - name: Analyze WASM size
      run: |
        echo "### WASM Bundle Sizes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Target | Raw Size | Optimized Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|----------|----------------|---------|" >> $GITHUB_STEP_SUMMARY
        
        for target in pkg pkg-node pkg-bundler; do
          if [ -f "lightning_db_wasm/$target/lightning_db_wasm_bg.wasm" ]; then
            RAW_SIZE=$(stat -c%s "lightning_db_wasm/$target/lightning_db_wasm_bg.wasm" 2>/dev/null || stat -f%z "lightning_db_wasm/$target/lightning_db_wasm_bg.wasm")
            
            # Optimize with wasm-opt
            wasm-opt -O3 "lightning_db_wasm/$target/lightning_db_wasm_bg.wasm" -o "lightning_db_wasm/$target/optimized.wasm"
            OPT_SIZE=$(stat -c%s "lightning_db_wasm/$target/optimized.wasm" 2>/dev/null || stat -f%z "lightning_db_wasm/$target/optimized.wasm")
            
            # Gzip
            gzip -c "lightning_db_wasm/$target/optimized.wasm" > "lightning_db_wasm/$target/optimized.wasm.gz"
            GZ_SIZE=$(stat -c%s "lightning_db_wasm/$target/optimized.wasm.gz" 2>/dev/null || stat -f%z "lightning_db_wasm/$target/optimized.wasm.gz")
            
            echo "| $target | $(numfmt --to=iec-i --suffix=B $RAW_SIZE) | $(numfmt --to=iec-i --suffix=B $OPT_SIZE) | $(numfmt --to=iec-i --suffix=B $GZ_SIZE) |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
  wasm-release:
    name: WASM Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [wasm-build, wasm-example, wasm-benchmarks]
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Download WASM packages
      uses: actions/download-artifact@v4
      with:
        name: wasm-packages
        path: lightning_db_wasm/
        
    - name: Prepare npm packages
      run: |
        # Update version in package.json files
        VERSION=${GITHUB_REF#refs/tags/}
        
        for pkg in pkg pkg-node pkg-bundler; do
          if [ -f "lightning_db_wasm/$pkg/package.json" ]; then
            cd "lightning_db_wasm/$pkg"
            npm version $VERSION --no-git-tag-version
            cd -
          fi
        done
        
    - name: Publish to npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd lightning_db_wasm/pkg
        npm publish --access public
        
        cd ../pkg-node
        npm publish --access public
        
        cd ../pkg-bundler
        npm publish --access public