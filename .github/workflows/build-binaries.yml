name: Build Binaries

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binaries:
    name: Build Binaries
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: lightning-cli
            asset_name: lightning_db-linux-x86_64
            use_cross: false
          
          # Linux x86_64 musl (static)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: lightning-cli
            asset_name: lightning_db-linux-x86_64-musl
            use_cross: true
          
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: lightning-cli
            asset_name: lightning_db-linux-arm64
            use_cross: true
          
          # Linux ARM64 musl (static)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: lightning-cli
            asset_name: lightning_db-linux-arm64-musl
            use_cross: true
          
          # Linux ARMv7
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            artifact_name: lightning-cli
            asset_name: lightning_db-linux-armv7
            use_cross: true
          
          # Linux i686
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            artifact_name: lightning-cli
            asset_name: lightning_db-linux-i686
            use_cross: true
          
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: lightning-cli.exe
            asset_name: lightning_db-windows-x86_64
            use_cross: false
          
          # Windows i686
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: lightning-cli.exe
            asset_name: lightning_db-windows-i686
            use_cross: false
          
          # Windows ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: lightning-cli.exe
            asset_name: lightning_db-windows-arm64
            use_cross: false
          
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: lightning-cli
            asset_name: lightning_db-macos-x86_64
            use_cross: false
          
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: lightning-cli
            asset_name: lightning_db-macos-arm64
            use_cross: false
          
          # FreeBSD x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd
            artifact_name: lightning-cli
            asset_name: lightning_db-freebsd-x86_64
            use_cross: true

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      
      - name: Install Cross
        if: matrix.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build Binary
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --bin lightning-cli
          else
            cargo build --release --target ${{ matrix.target }} --bin lightning-cli
          fi
        shell: bash
      
      - name: Strip Binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ -f "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" ]; then
            if command -v strip >/dev/null 2>&1; then
              strip "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" || true
            fi
          fi
        shell: bash
      
      - name: Create Archive
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "${{ matrix.asset_name }}.zip" "${{ matrix.artifact_name }}"
            echo "ASSET=${{ matrix.asset_name }}.zip" >> $GITHUB_ENV
          else
            tar czf "${{ matrix.asset_name }}.tar.gz" "${{ matrix.artifact_name }}"
            echo "ASSET=${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
          fi
        shell: bash
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ./target/${{ matrix.target }}/release/${{ env.ASSET }}
          retention-days: 30

  build-wasm:
    name: Build WebAssembly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build WASM
        run: |
          cargo build --release --target wasm32-unknown-unknown --no-default-features
          
          # Create WASM package
          mkdir -p wasm-pkg
          cp target/wasm32-unknown-unknown/release/*.wasm wasm-pkg/ || true
          cp README.md wasm-pkg/
          
          # Create archive
          tar czf lightning_db-wasm32.tar.gz -C wasm-pkg .
      
      - name: Upload WASM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lightning_db-wasm32
          path: ./lightning_db-wasm32.tar.gz
          retention-days: 30

  build-universal-macos:
    name: Build Universal macOS Binary
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin
      
      - name: Build Universal Binary
        run: |
          # Build for both architectures
          cargo build --release --target x86_64-apple-darwin --bin lightning-cli
          cargo build --release --target aarch64-apple-darwin --bin lightning-cli
          
          # Create universal binary
          mkdir -p universal
          lipo -create \
            target/x86_64-apple-darwin/release/lightning-cli \
            target/aarch64-apple-darwin/release/lightning-cli \
            -output universal/lightning-cli
          
          # Strip the binary
          strip universal/lightning-cli
          
          # Create archive
          tar czf lightning_db-macos-universal.tar.gz -C universal lightning-cli
      
      - name: Upload Universal Binary
        uses: actions/upload-artifact@v4
        with:
          name: lightning_db-macos-universal
          path: ./lightning_db-macos-universal.tar.gz
          retention-days: 30

  build-android:
    name: Build Android Libraries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android
      
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
          add-to-path: true
      
      - name: Install cargo-ndk
        run: cargo install cargo-ndk
      
      - name: Build Android libraries
        run: |
          cargo ndk -t aarch64-linux-android build --release -p lightning_db_ffi
          cargo ndk -t armv7-linux-androideabi build --release -p lightning_db_ffi
          cargo ndk -t i686-linux-android build --release -p lightning_db_ffi
          cargo ndk -t x86_64-linux-android build --release -p lightning_db_ffi
      
      - name: Create Android AAR
        run: |
          # Create AAR structure
          mkdir -p aar/jni/{arm64-v8a,armeabi-v7a,x86,x86_64}
          
          # Copy libraries
          cp target/aarch64-linux-android/release/liblightning_db_ffi.so aar/jni/arm64-v8a/liblightning_db.so
          cp target/armv7-linux-androideabi/release/liblightning_db_ffi.so aar/jni/armeabi-v7a/liblightning_db.so
          cp target/i686-linux-android/release/liblightning_db_ffi.so aar/jni/x86/liblightning_db.so
          cp target/x86_64-linux-android/release/liblightning_db_ffi.so aar/jni/x86_64/liblightning_db.so
          
          # Create manifest
          cat > aar/AndroidManifest.xml <<EOF
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.lightning_db.ffi">
              <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="34" />
          </manifest>
          EOF
          
          # Create empty classes.jar
          mkdir -p aar/classes
          cd aar/classes && jar cf ../classes.jar . && cd ../..
          
          # Package AAR
          cd aar && zip -r ../lightning_db-android.aar . && cd ..
      
      - name: Upload Android AAR
        uses: actions/upload-artifact@v4
        with:
          name: lightning_db-android
          path: ./lightning_db-android.aar
          retention-days: 30
      
      - name: Create Android libraries archive
        run: |
          mkdir -p android-libs
          cp -r target/*/release/*.so android-libs/
          tar czf lightning_db-android-libs.tar.gz android-libs/
      
      - name: Upload Android libraries
        uses: actions/upload-artifact@v4
        with:
          name: lightning_db-android-libs
          path: ./lightning_db-android-libs.tar.gz
          retention-days: 30