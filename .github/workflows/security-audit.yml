name: Security Audit

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install cargo-audit
        run: cargo install --force cargo-audit

      - name: Install cargo-deny
        run: cargo install --force cargo-deny

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-security-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-security-
            ${{ runner.os }}-cargo-

      - name: Run cargo audit
        id: cargo-audit
        run: |
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "### Cargo Audit" >> $GITHUB_STEP_SUMMARY
          
          # Run audit and capture output
          if cargo audit --json > audit_results.json; then
            echo "✅ No known security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            echo "audit_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo "audit_status=failure" >> $GITHUB_OUTPUT
            
            # Parse JSON and format for summary
            if [ -f audit_results.json ]; then
              echo "```json" >> $GITHUB_STEP_SUMMARY
              cat audit_results.json >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Still continue to run other checks
          fi

      - name: Generate cargo-deny configuration
        run: |
          cat > deny.toml << 'EOF'
          [advisories]
          db-path = "~/.cargo/advisory-db"
          db-urls = ["https://github.com/RustSec/advisory-db"]
          vulnerability = "deny"
          unmaintained = "warn"
          yanked = "deny"
          notice = "warn"
          ignore = []

          [licenses]
          unlicensed = "deny"
          allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
            "CC0-1.0",
            "Unlicense",
          ]
          deny = []
          copyleft = "warn"
          allow-osi-fsf-free = "neither"
          default = "deny"
          confidence-threshold = 0.8
          exceptions = []

          [bans]
          multiple-versions = "warn"
          wildcards = "allow"
          highlight = "all"
          workspace-default-features = "allow"
          external-default-features = "allow"
          allow = []
          deny = []
          skip = []
          skip-tree = []

          [sources]
          unknown-registry = "warn"
          unknown-git = "warn"
          allow-registry = ["https://github.com/rust-lang/crates.io-index"]
          allow-git = []
          EOF

      - name: Run cargo deny
        id: cargo-deny
        continue-on-error: true
        run: |
          echo "### Cargo Deny" >> $GITHUB_STEP_SUMMARY
          
          # Check advisories
          if cargo deny --all-features check advisories; then
            echo "✅ No security advisories found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security advisories detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check licenses
          if cargo deny --all-features check licenses; then
            echo "✅ All licenses compliant" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ License compliance issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for banned dependencies
          if cargo deny --all-features check bans; then
            echo "✅ No banned dependencies found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Banned dependencies detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security-focused clippy lints
        id: security-clippy
        run: |
          echo "### Security Clippy Lints" >> $GITHUB_STEP_SUMMARY
          
          # Run security-focused clippy lints
          CLIPPY_RESULT=$(cargo clippy --all-targets --all-features -- \
            -D clippy::integer_overflow \
            -D clippy::panic \
            -D clippy::unwrap_used \
            -D clippy::expect_used \
            -D clippy::indexing_slicing \
            -D clippy::arithmetic_side_effects \
            -D clippy::as_conversions \
            -D clippy::cast_ptr_alignment \
            -D clippy::fn_to_numeric_cast_any \
            -D clippy::lossy_float_literal \
            -D clippy::mem_forget \
            -D clippy::multiple_unsafe_ops_per_block \
            -D clippy::undocumented_unsafe_blocks \
            -D clippy::transmute_ptr_to_ptr \
            -W clippy::cast_lossless \
            -W clippy::cast_possible_truncation \
            -W clippy::cast_possible_wrap \
            -W clippy::cast_precision_loss \
            -W clippy::cast_sign_loss \
            -W clippy::float_cmp \
            -W clippy::float_cmp_const \
            -W clippy::imprecise_flops \
            -W clippy::suboptimal_flops \
            2>&1 || true)
          
          if echo "$CLIPPY_RESULT" | grep -q "error:"; then
            echo "❌ Security-critical clippy lints failed" >> $GITHUB_STEP_SUMMARY
            echo "clippy_status=failure" >> $GITHUB_OUTPUT
          else
            echo "✅ Security clippy lints passed" >> $GITHUB_STEP_SUMMARY
            echo "clippy_status=success" >> $GITHUB_OUTPUT
          fi

      - name: Check for unsafe code usage
        id: unsafe-check
        run: |
          echo "### Unsafe Code Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Count unsafe blocks and functions
          unsafe_count=$(grep -r "unsafe" src/ --include="*.rs" | grep -E "(unsafe fn|unsafe {|unsafe impl)" | wc -l)
          echo "Found $unsafe_count unsafe code blocks/functions" >> $GITHUB_STEP_SUMMARY
          
          if [ "$unsafe_count" -gt 0 ]; then
            echo "⚠️ Unsafe code detected - manual review required" >> $GITHUB_STEP_SUMMARY
            echo "### Unsafe Code Locations:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -r "unsafe" src/ --include="*.rs" -n | head -20 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No unsafe code found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "unsafe_count=$unsafe_count" >> $GITHUB_OUTPUT

      - name: Dependency tree analysis
        run: |
          echo "### Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Generate dependency tree
          cargo tree --depth 3 > dep_tree.txt
          total_deps=$(cargo tree --prefix none | wc -l)
          echo "Total dependencies: $total_deps" >> $GITHUB_STEP_SUMMARY
          
          # Check for high-risk dependencies
          echo "### Dependency Tree (top 3 levels):" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -50 dep_tree.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results-${{ github.run_id }}
          path: |
            audit_results.json
            dep_tree.txt
            deny.toml
          retention-days: 30

      - name: Create security report
        if: always()
        run: |
          cat > security_report.md << 'EOF'
          # Security Audit Report
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Date:** $(date -u)
          
          ## Summary
          
          - **Cargo Audit:** ${{ steps.cargo-audit.outputs.audit_status || 'unknown' }}
          - **Security Clippy:** ${{ steps.security-clippy.outputs.clippy_status || 'unknown' }}
          - **Unsafe Code Blocks:** ${{ steps.unsafe-check.outputs.unsafe_count || '0' }}
          
          ## Recommendations
          
          1. Review all security findings above
          2. Update vulnerable dependencies immediately
          3. Document and justify any unsafe code usage
          4. Consider implementing additional security controls
          
          ## Next Steps
          
          - [ ] Address critical vulnerabilities
          - [ ] Review license compliance issues
          - [ ] Audit unsafe code usage
          - [ ] Update security documentation
          
          EOF
          
          echo "Security report generated" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditStatus = '${{ steps.cargo-audit.outputs.audit_status }}';
            const clippyStatus = '${{ steps.security-clippy.outputs.clippy_status }}';
            const unsafeCount = '${{ steps.unsafe-check.outputs.unsafe_count }}';
            
            let comment = '## 🔒 Security Audit Results\n\n';
            comment += `- **Cargo Audit**: ${auditStatus === 'success' ? '✅ Passed' : '❌ Failed'}\n`;
            comment += `- **Security Clippy**: ${clippyStatus === 'success' ? '✅ Passed' : '❌ Failed'}\n`;
            comment += `- **Unsafe Code Blocks**: ${unsafeCount || '0'}\n\n`;
            
            if (auditStatus === 'failure' || clippyStatus === 'failure') {
              comment += '⚠️ **Security issues detected!** Please review the workflow logs for details.\n\n';
            }
            
            comment += 'Full results available in the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-scorecard:
    name: Security Scorecard
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    steps:
      - name: Run Scorecard Analysis
        uses: ossf/scorecard-action@v2.4.0
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif