#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#if _WIN32
#include <windows.h>
#else
#include <pthread.h>
#include <unistd.h>
#endif

#if _WIN32
#define FFI_PLUGIN_EXPORT __declspec(dllexport)
#else
#define FFI_PLUGIN_EXPORT
#endif

typedef uint64_t DatabaseHandle;
typedef uint64_t TransactionHandle;
typedef uint64_t IteratorHandle;


#ifndef LIGHTNING_DB_FFI_H
#define LIGHTNING_DB_FFI_H

#pragma once

/* This file is automatically generated by cbindgen. Do not modify. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum CompressionType {
  CompressionTypeNone = 0,
  CompressionTypeZstd = 1,
  CompressionTypeLz4 = 2,
  CompressionTypeSnappy = 3,
} CompressionType;

typedef enum ConsistencyLevel {
  ConsistencyLevelEventual = 0,
  ConsistencyLevelStrong = 1,
} ConsistencyLevel;

typedef enum ErrorCode {
  ErrorCodeSuccess = 0,
  ErrorCodeInvalidArgument = 1,
  ErrorCodeDatabaseNotFound = 2,
  ErrorCodeDatabaseExists = 3,
  ErrorCodeTransactionNotFound = 4,
  ErrorCodeTransactionConflict = 5,
  ErrorCodeKeyNotFound = 6,
  ErrorCodeIoError = 7,
  ErrorCodeCorruptedData = 8,
  ErrorCodeOutOfMemory = 9,
  ErrorCodeUnknown = 999,
} ErrorCode;

typedef enum WalSyncMode {
  WalSyncModeSync = 0,
  WalSyncModePeriodic = 1,
  WalSyncModeAsync = 2,
} WalSyncMode;

/**
 * Result structure for returning data across FFI boundary
 */
typedef struct ByteResult {
  uint8_t *DATA;
  uintptr_t LEN;
  int32_t ERROR_CODE;
} ByteResult;

/**
 * Key-value pair result for iterator
 */
typedef struct KeyValueResult {
  uint8_t *KEY;
  uintptr_t KEY_LEN;
  uint8_t *VALUE;
  uintptr_t VALUE_LEN;
  int32_t ERROR_CODE;
} KeyValueResult;

FFI_PLUGIN_EXPORT  int32_t lightning_db_init(void);

FFI_PLUGIN_EXPORT 
void _force_enum_inclusion(enum ErrorCode _error_code,
                           enum ConsistencyLevel _consistency_level,
                           enum WalSyncMode _wal_sync_mode,
                           enum CompressionType _compression_type);

/**
 * Get the last error message
 *
 * # Safety
 * - The returned pointer is valid until the next call to any function that sets an error
 * - The caller must not free the returned pointer
 */
FFI_PLUGIN_EXPORT  const char *lightning_db_get_last_error(void);

/**
 * Get the last error message and copy it to a buffer
 *
 * # Safety
 * - buffer must be valid for buffer_len bytes
 * - Returns the number of bytes written (excluding null terminator)
 */
FFI_PLUGIN_EXPORT  int32_t lightning_db_get_last_error_buffer(char *buffer, uintptr_t buffer_len);

/**
 * Clear the last error
 */
FFI_PLUGIN_EXPORT  void lightning_db_clear_error(void);

/**
 * Create a new Lightning DB database
 *
 * # Safety
 * - path must be a valid null-terminated UTF-8 string
 * - Returns 0 on success with handle stored in out_handle, error code on failure
 */
FFI_PLUGIN_EXPORT  int32_t lightning_db_create(const char *path, uint64_t *out_handle);

/**
 * Open an existing Lightning DB database
 *
 * # Safety
 * - path must be a valid null-terminated UTF-8 string
 * - Returns 0 on success with handle stored in out_handle, error code on failure
 */
FFI_PLUGIN_EXPORT  int32_t lightning_db_open(const char *path, uint64_t *out_handle);

/**
 * Create a database with custom configuration
 *
 * # Safety
 * - path must be a valid null-terminated UTF-8 string
 * - Returns 0 on success with handle stored in out_handle, error code on failure
 */
FFI_PLUGIN_EXPORT 
int32_t lightning_db_create_with_config(const char *path,
                                        uint64_t cache_size,
                                        enum CompressionType compression_type,
                                        enum WalSyncMode wal_sync_mode,
                                        uint64_t *out_handle);

/**
 * Close a database and free its resources
 *
 * # Safety
 * - The handle must be valid
 * - The handle must not be used after calling this function
 */
FFI_PLUGIN_EXPORT  int32_t lightning_db_close(uint64_t handle);

/**
 * Put a key-value pair into the database
 *
 * # Safety
 * - key must be valid for key_len bytes
 * - value must be valid for value_len bytes
 */
FFI_PLUGIN_EXPORT 
int32_t lightning_db_put(uint64_t handle,
                         const uint8_t *key,
                         uintptr_t key_len,
                         const uint8_t *value,
                         uintptr_t value_len);

/**
 * Get a value from the database
 *
 * # Safety
 * - key must be valid for key_len bytes
 * - The returned ByteResult must be freed using lightning_db_free_bytes
 */
FFI_PLUGIN_EXPORT 
struct ByteResult lightning_db_get(uint64_t handle,
                                   const uint8_t *key,
                                   uintptr_t key_len);

/**
 * Delete a key from the database
 *
 * # Safety
 * - key must be valid for key_len bytes
 * - Returns 0 on success (key deleted), 1 if key not found, negative on error
 */
FFI_PLUGIN_EXPORT 
int32_t lightning_db_delete(uint64_t handle,
                            const uint8_t *key,
                            uintptr_t key_len);

/**
 * Sync the database to disk
 *
 * # Safety
 * - The handle must be valid
 */
FFI_PLUGIN_EXPORT  int32_t lightning_db_sync(uint64_t handle);

/**
 * Checkpoint the database
 *
 * # Safety
 * - The handle must be valid
 */
FFI_PLUGIN_EXPORT  int32_t lightning_db_checkpoint(uint64_t handle);

/**
 * Put with consistency level
 *
 * # Safety
 * - key must be valid for key_len bytes
 * - value must be valid for value_len bytes
 */
FFI_PLUGIN_EXPORT 
int32_t lightning_db_put_with_consistency(uint64_t handle,
                                          const uint8_t *key,
                                          uintptr_t key_len,
                                          const uint8_t *value,
                                          uintptr_t value_len,
                                          enum ConsistencyLevel consistency);

/**
 * Get with consistency level
 *
 * # Safety
 * - key must be valid for key_len bytes
 * - The returned ByteResult must be freed using lightning_db_free_bytes
 */
FFI_PLUGIN_EXPORT 
struct ByteResult lightning_db_get_with_consistency(uint64_t handle,
                                                    const uint8_t *key,
                                                    uintptr_t key_len,
                                                    enum ConsistencyLevel consistency);

/**
 * Create an iterator for scanning a range of keys
 *
 * # Safety
 * - start_key/end_key must be valid for their respective lengths (can be null for unbounded)
 * - Returns 0 on success with iterator handle stored in out_handle, error code on failure
 */
FFI_PLUGIN_EXPORT 
int32_t lightning_db_scan(uint64_t db_handle,
                          const uint8_t *start_key,
                          uintptr_t start_key_len,
                          const uint8_t *end_key,
                          uintptr_t end_key_len,
                          uint64_t *out_handle);

/**
 * Get the next key-value pair from an iterator
 *
 * # Safety
 * - The iterator handle must be valid
 * - The returned KeyValueResult must be freed using lightning_db_free_key_value
 */
FFI_PLUGIN_EXPORT  struct KeyValueResult lightning_db_iterator_next(uint64_t iter_handle);

/**
 * Close an iterator and free its resources
 *
 * # Safety
 * - The handle must be valid
 * - The handle must not be used after calling this function
 */
FFI_PLUGIN_EXPORT  int32_t lightning_db_iterator_close(uint64_t iter_handle);

/**
 * Free a key-value result
 *
 * # Safety
 * - The result must have been returned by lightning_db_iterator_next
 * - The result must not be used after calling this function
 */
FFI_PLUGIN_EXPORT  void lightning_db_free_key_value(struct KeyValueResult result);

/**
 * Begin a new transaction
 *
 * # Safety
 * - The database handle must be valid
 * - Returns 0 on success with transaction handle stored in out_handle, error code on failure
 */
FFI_PLUGIN_EXPORT  int32_t lightning_db_begin_transaction(uint64_t db_handle, uint64_t *out_handle);

/**
 * Commit a transaction
 *
 * # Safety
 * - The transaction handle must be valid
 * - The handle must not be used after calling this function
 */
FFI_PLUGIN_EXPORT  int32_t lightning_db_commit_transaction(uint64_t tx_handle);

/**
 * Abort a transaction
 *
 * # Safety
 * - The transaction handle must be valid
 * - The handle must not be used after calling this function
 */
FFI_PLUGIN_EXPORT  int32_t lightning_db_abort_transaction(uint64_t tx_handle);

/**
 * Put a key-value pair within a transaction
 *
 * # Safety
 * - key must be valid for key_len bytes
 * - value must be valid for value_len bytes
 */
FFI_PLUGIN_EXPORT 
int32_t lightning_db_put_tx(uint64_t tx_handle,
                            const uint8_t *key,
                            uintptr_t key_len,
                            const uint8_t *value,
                            uintptr_t value_len);

/**
 * Get a value within a transaction
 *
 * # Safety
 * - key must be valid for key_len bytes
 * - The returned ByteResult must be freed using lightning_db_free_bytes
 */
FFI_PLUGIN_EXPORT 
struct ByteResult lightning_db_get_tx(uint64_t tx_handle,
                                      const uint8_t *key,
                                      uintptr_t key_len);

/**
 * Delete a key within a transaction
 *
 * # Safety
 * - key must be valid for key_len bytes
 */
FFI_PLUGIN_EXPORT 
int32_t lightning_db_delete_tx(uint64_t tx_handle,
                               const uint8_t *key,
                               uintptr_t key_len);

/**
 * Free a string allocated by this library
 *
 * # Safety
 * - The pointer must have been allocated by this library
 * - The pointer must not be used after calling this function
 */
FFI_PLUGIN_EXPORT  void lightning_db_free_string(char *ptr);

/**
 * Free bytes allocated by this library
 *
 * # Safety
 * - The pointer must have been allocated by this library with the given length
 * - The pointer must not be used after calling this function
 */
FFI_PLUGIN_EXPORT  void lightning_db_free_bytes(uint8_t *ptr, uintptr_t len);

#endif  /* LIGHTNING_DB_FFI_H */
