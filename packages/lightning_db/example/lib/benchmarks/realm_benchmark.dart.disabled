import 'dart:io';
import 'package:realm/realm.dart';
import 'benchmark_runner.dart';
import 'benchmark_models.dart';

// Realm model definitions
part 'realm_benchmark.g.dart';

@RealmModel()
class _RealmUser {
  @PrimaryKey()
  late String id;
  
  late String name;
  late String email;
  late int age;
  late DateTime createdAt;
  late String? metadataJson; // Store metadata as JSON string
}

@RealmModel()
class _RealmPost {
  @PrimaryKey()
  late String id;
  
  late String title;
  late String content;
  late String authorId;
  late DateTime createdAt;
  late DateTime? updatedAt;
  late String? tagsJson; // Store tags as JSON string
  late String? metadataJson;
}

@RealmModel()
class _RealmComment {
  @PrimaryKey()
  late String id;
  
  late String postId;
  late String authorId;
  late String content;
  late DateTime createdAt;
  late DateTime? editedAt;
  late int likes;
  late String? metadataJson;
}

/// Realm benchmark implementation
class RealmBenchmark extends BenchmarkRunner {
  late Realm realm;
  final String dbPath;
  final int recordCount;
  
  RealmBenchmark({
    required this.dbPath,
    required this.recordCount,
  }) : super('Realm');
  
  @override
  Future<void> setup() async {
    // Delete existing database
    final dbFile = File(dbPath);
    if (await dbFile.exists()) {
      await dbFile.delete();
    }
    
    // Configure and open Realm
    final config = Configuration.local(
      [RealmUser.schema, RealmPost.schema, RealmComment.schema],
      path: dbPath,
    );
    
    realm = Realm(config);
  }
  
  @override
  Future<void> cleanup() async {
    realm.close();
  }
  
  @override
  Future<void> runIteration(int iteration) async {
    // This will be overridden by specific benchmark types
  }
  
  RealmUser _toRealmUser(BenchmarkUser user) => RealmUser(
    user.id,
    user.name,
    user.email,
    user.age,
    user.createdAt,
    metadataJson: user.metadata.isNotEmpty 
        ? _toJson(user.metadata)
        : null,
  );
  
  BenchmarkUser _fromRealmUser(RealmUser realmUser) => BenchmarkUser(
    id: realmUser.id,
    name: realmUser.name,
    email: realmUser.email,
    age: realmUser.age,
    createdAt: realmUser.createdAt,
    metadata: realmUser.metadataJson != null
        ? _fromJson(realmUser.metadataJson!)
        : {},
  );
  
  String _toJson(dynamic value) => value.toString(); // Simplified
  Map<String, dynamic> _fromJson(String json) => {}; // Simplified
}

/// CRUD operations benchmark
class RealmCrudBenchmark extends RealmBenchmark {
  RealmCrudBenchmark({
    required String dbPath,
    required int recordCount,
  }) : super(dbPath: dbPath, recordCount: recordCount);
  
  @override
  String get name => 'Realm - CRUD';
  
  @override
  Future<void> runIteration(int iteration) async {
    final user = BenchmarkUser(
      id: 'user_$iteration',
      name: 'User $iteration',
      email: 'user$iteration@example.com',
      age: 20 + (iteration % 50),
      createdAt: DateTime.now(),
      metadata: {
        'iteration': iteration,
        'active': iteration % 2 == 0,
        'score': iteration * 1.5,
      },
    );
    
    // Create
    realm.write(() {
      realm.add(_toRealmUser(user));
    });
    
    // Read
    final retrieved = realm.find<RealmUser>(user.id);
    
    // Update
    if (retrieved != null) {
      realm.write(() {
        retrieved.name = 'Updated ${retrieved.name}';
        retrieved.metadataJson = _toJson({
          ..._fromJson(retrieved.metadataJson ?? '{}'),
          'updated': true,
        });
      });
    }
    
    // Read again
    realm.find<RealmUser>(user.id);
    
    // Delete
    realm.write(() {
      if (retrieved != null) {
        realm.delete(retrieved);
      }
    });
  }
}

/// Bulk insert benchmark
class RealmBulkInsertBenchmark extends RealmBenchmark {
  RealmBulkInsertBenchmark({
    required String dbPath,
    required int recordCount,
  }) : super(dbPath: dbPath, recordCount: recordCount);
  
  @override
  String get name => 'Realm - Bulk Insert';
  
  @override
  Future<void> setup() async {
    await super.setup();
    results.clear();
  }
  
  @override
  Future<void> runIteration(int iteration) async {
    if (iteration > 0) return; // Run only once
    
    final batch = List.generate(recordCount, (i) => BenchmarkUser(
      id: 'bulk_user_$i',
      name: 'Bulk User $i',
      email: 'bulk$i@example.com',
      age: 20 + (i % 50),
      createdAt: DateTime.now(),
      metadata: {
        'index': i,
        'batch': true,
        'score': i * 0.1,
      },
    ));
    
    // Insert in batches
    final batchOp = BatchOperation(items: batch, batchSize: 1000);
    await batchOp.processBatches((items) async {
      realm.write(() {
        for (final item in items) {
          realm.add(_toRealmUser(item));
        }
      });
    });
  }
}

/// Query benchmark
class RealmQueryBenchmark extends RealmBenchmark {
  RealmQueryBenchmark({
    required String dbPath,
    required int recordCount,
  }) : super(dbPath: dbPath, recordCount: recordCount);
  
  @override
  String get name => 'Realm - Query';
  
  @override
  Future<void> setup() async {
    await super.setup();
    
    // Insert test data
    final batch = List.generate(recordCount, (i) => BenchmarkUser(
      id: 'query_user_$i',
      name: 'Query User $i',
      email: 'query$i@example.com',
      age: 20 + (i % 50),
      createdAt: DateTime.now().subtract(Duration(days: i % 365)),
      metadata: {
        'city': ['New York', 'London', 'Tokyo', 'Paris'][i % 4],
        'active': i % 2 == 0,
        'score': (i % 100) * 1.0,
        'tags': ['developer', 'designer', 'manager', 'analyst'].sublist(0, (i % 4) + 1),
      },
    ));
    
    await BatchOperation(items: batch, batchSize: 1000).processBatches((items) async {
      realm.write(() {
        for (final item in items) {
          realm.add(_toRealmUser(item));
        }
      });
    });
  }
  
  @override
  Future<void> runIteration(int iteration) async {
    // Run different query types
    switch (iteration % 5) {
      case 0:
        // Simple equality query (Realm doesn't support JSON queries easily)
        final results = realm.all<RealmUser>().query('age > 25').take(100);
        results.toList(); // Force evaluation
        break;
        
      case 1:
        // Range query
        final results = realm.all<RealmUser>()
          .query('age > 30 AND age < 40 SORT(age ASC)');
        results.toList();
        break;
        
      case 2:
        // Complex query (limited by Realm's query language)
        final results = realm.all<RealmUser>()
          .query('age > 25 SORT(age DESC)')
          .take(50);
        results.toList();
        break;
        
      case 3:
        // Text search
        final results = realm.all<RealmUser>()
          .query("name CONTAINS '5'");
        results.toList();
        break;
        
      case 4:
        // Aggregation (manual in Realm)
        final all = realm.all<RealmUser>();
        final count = all.length;
        final avgAge = all.isNotEmpty 
            ? all.map((u) => u.age).reduce((a, b) => a + b) / count
            : 0;
        break;
    }
  }
}

/// Transaction benchmark
class RealmTransactionBenchmark extends RealmBenchmark {
  RealmTransactionBenchmark({
    required String dbPath,
    required int recordCount,
  }) : super(dbPath: dbPath, recordCount: recordCount);
  
  @override
  String get name => 'Realm - Transaction';
  
  @override
  Future<void> setup() async {
    await super.setup();
    
    // Create initial accounts
    realm.write(() {
      for (int i = 0; i < 10; i++) {
        realm.add(_toRealmUser(BenchmarkUser(
          id: 'account_$i',
          name: 'Account $i',
          email: 'account$i@example.com',
          age: 30,
          createdAt: DateTime.now(),
          metadata: {
            'balance': 1000.0,
          },
        )));
      }
    });
  }
  
  @override
  Future<void> runIteration(int iteration) async {
    final fromId = 'account_${iteration % 10}';
    final toId = 'account_${(iteration + 1) % 10}';
    final amount = 10.0;
    
    realm.write(() {
      final from = realm.find<RealmUser>(fromId);
      final to = realm.find<RealmUser>(toId);
      
      if (from != null && to != null) {
        final fromData = _fromRealmUser(from);
        final toData = _fromRealmUser(to);
        
        final fromBalance = (fromData.metadata['balance'] as num).toDouble();
        final toBalance = (toData.metadata['balance'] as num).toDouble();
        
        // Update balances
        from.metadataJson = _toJson({
          ...fromData.metadata,
          'balance': fromBalance - amount,
        });
        
        to.metadataJson = _toJson({
          ...toData.metadata,
          'balance': toBalance + amount,
        });
      }
    });
  }
}

/// Concurrent access benchmark
class RealmConcurrentBenchmark extends RealmBenchmark {
  RealmConcurrentBenchmark({
    required String dbPath,
    required int recordCount,
  }) : super(dbPath: dbPath, recordCount: recordCount);
  
  @override
  String get name => 'Realm - Concurrent';
  
  @override
  Future<void> runIteration(int iteration) async {
    // Note: Realm doesn't handle true concurrent writes well
    // This simulates concurrent-like access patterns
    
    // Sequential writes (Realm limitation)
    realm.write(() {
      realm.add(_toRealmUser(BenchmarkUser(
        id: 'concurrent_${iteration}_1',
        name: 'Concurrent User 1',
        email: 'concurrent1@example.com',
        age: 25,
        createdAt: DateTime.now(),
        metadata: {},
      )));
      
      realm.add(_toRealmUser(BenchmarkUser(
        id: 'concurrent_${iteration}_2',
        name: 'Concurrent User 2',
        email: 'concurrent2@example.com',
        age: 30,
        createdAt: DateTime.now(),
        metadata: {},
      )));
    });
    
    // Concurrent reads are OK
    await Future.wait([
      Future(() => realm.all<RealmUser>().take(10).toList()),
      Future(() => realm.all<RealmUser>().query('age > 25').toList()),
    ]);
  }
}