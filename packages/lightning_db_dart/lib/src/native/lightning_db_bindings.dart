// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// Generated by `dart run ffigen`.
// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
//
// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Lightning DB native library bindings
class LightningDbBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LightningDbBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LightningDbBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int lightning_db_abort_transaction(
    int handle,
  ) {
    return _lightning_db_abort_transaction(
      handle,
    );
  }

  late final _lightning_db_abort_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_abort_transaction');
  late final _lightning_db_abort_transaction =
      _lightning_db_abort_transactionPtr.asFunction<int Function(int)>();

  int lightning_db_begin_transaction(
    int db_handle,
    ffi.Pointer<ffi.Uint64> out_handle,
  ) {
    return _lightning_db_begin_transaction(
      db_handle,
      out_handle,
    );
  }

  late final _lightning_db_begin_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64,
              ffi.Pointer<ffi.Uint64>)>>('lightning_db_begin_transaction');
  late final _lightning_db_begin_transaction =
      _lightning_db_begin_transactionPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Uint64>)>();

  int lightning_db_checkpoint(
    int handle,
  ) {
    return _lightning_db_checkpoint(
      handle,
    );
  }

  late final _lightning_db_checkpointPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_checkpoint');
  late final _lightning_db_checkpoint =
      _lightning_db_checkpointPtr.asFunction<int Function(int)>();

  void lightning_db_clear_error() {
    return _lightning_db_clear_error();
  }

  late final _lightning_db_clear_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'lightning_db_clear_error');
  late final _lightning_db_clear_error =
      _lightning_db_clear_errorPtr.asFunction<void Function()>();

  int lightning_db_close(
    int handle,
  ) {
    return _lightning_db_close(
      handle,
    );
  }

  late final _lightning_db_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_close');
  late final _lightning_db_close =
      _lightning_db_closePtr.asFunction<int Function(int)>();

  int lightning_db_commit_transaction(
    int handle,
  ) {
    return _lightning_db_commit_transaction(
      handle,
    );
  }

  late final _lightning_db_commit_transactionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_commit_transaction');
  late final _lightning_db_commit_transaction =
      _lightning_db_commit_transactionPtr.asFunction<int Function(int)>();

  int lightning_db_create(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint64> out_handle,
  ) {
    return _lightning_db_create(
      path,
      out_handle,
    );
  }

  late final _lightning_db_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('lightning_db_create');
  late final _lightning_db_create = _lightning_db_createPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int lightning_db_create_with_config(
    ffi.Pointer<ffi.Char> path,
    int cache_size,
    int compression_type,
    int wal_sync_mode,
    ffi.Pointer<ffi.Uint64> out_handle,
  ) {
    return _lightning_db_create_with_config(
      path,
      cache_size,
      compression_type,
      wal_sync_mode,
      out_handle,
    );
  }

  late final _lightning_db_create_with_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Uint64,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Uint64>)>>('lightning_db_create_with_config');
  late final _lightning_db_create_with_config =
      _lightning_db_create_with_configPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Uint64>)>();

  int lightning_db_delete(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _lightning_db_delete(
      handle,
      key,
      key_len,
    );
  }

  late final _lightning_db_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>>('lightning_db_delete');
  late final _lightning_db_delete = _lightning_db_deletePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  int lightning_db_delete_tx(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _lightning_db_delete_tx(
      handle,
      key,
      key_len,
    );
  }

  late final _lightning_db_delete_txPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>>('lightning_db_delete_tx');
  late final _lightning_db_delete_tx = _lightning_db_delete_txPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  void lightning_db_free_bytes(
    ByteResult result,
  ) {
    return _lightning_db_free_bytes(
      result,
    );
  }

  late final _lightning_db_free_bytesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ByteResult)>>(
          'lightning_db_free_bytes');
  late final _lightning_db_free_bytes =
      _lightning_db_free_bytesPtr.asFunction<void Function(ByteResult)>();

  void lightning_db_free_key_value(
    KeyValueResult result,
  ) {
    return _lightning_db_free_key_value(
      result,
    );
  }

  late final _lightning_db_free_key_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KeyValueResult)>>(
          'lightning_db_free_key_value');
  late final _lightning_db_free_key_value = _lightning_db_free_key_valuePtr
      .asFunction<void Function(KeyValueResult)>();

  void lightning_db_free_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _lightning_db_free_string(
      str,
    );
  }

  late final _lightning_db_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'lightning_db_free_string');
  late final _lightning_db_free_string = _lightning_db_free_stringPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ByteResult lightning_db_get(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _lightning_db_get(
      handle,
      key,
      key_len,
    );
  }

  late final _lightning_db_getPtr = _lookup<
      ffi.NativeFunction<
          ByteResult Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>>('lightning_db_get');
  late final _lightning_db_get = _lightning_db_getPtr
      .asFunction<ByteResult Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Char> lightning_db_get_last_error() {
    return _lightning_db_get_last_error();
  }

  late final _lightning_db_get_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'lightning_db_get_last_error');
  late final _lightning_db_get_last_error = _lightning_db_get_last_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  int lightning_db_get_last_error_buffer(
    ffi.Pointer<ffi.Char> buffer,
    int buffer_len,
  ) {
    return _lightning_db_get_last_error_buffer(
      buffer,
      buffer_len,
    );
  }

  late final _lightning_db_get_last_error_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.UintPtr)>>('lightning_db_get_last_error_buffer');
  late final _lightning_db_get_last_error_buffer =
      _lightning_db_get_last_error_bufferPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ByteResult lightning_db_get_tx(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
  ) {
    return _lightning_db_get_tx(
      handle,
      key,
      key_len,
    );
  }

  late final _lightning_db_get_txPtr = _lookup<
      ffi.NativeFunction<
          ByteResult Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>>('lightning_db_get_tx');
  late final _lightning_db_get_tx = _lightning_db_get_txPtr
      .asFunction<ByteResult Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  ByteResult lightning_db_get_with_consistency(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    int consistency_level,
  ) {
    return _lightning_db_get_with_consistency(
      handle,
      key,
      key_len,
      consistency_level,
    );
  }

  late final _lightning_db_get_with_consistencyPtr = _lookup<
      ffi.NativeFunction<
          ByteResult Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr,
              ffi.Int32)>>('lightning_db_get_with_consistency');
  late final _lightning_db_get_with_consistency =
      _lightning_db_get_with_consistencyPtr.asFunction<
          ByteResult Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  /// Function declarations
  int lightning_db_init() {
    return _lightning_db_init();
  }

  late final _lightning_db_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('lightning_db_init');
  late final _lightning_db_init =
      _lightning_db_initPtr.asFunction<int Function()>();

  int lightning_db_iterator_close(
    int handle,
  ) {
    return _lightning_db_iterator_close(
      handle,
    );
  }

  late final _lightning_db_iterator_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_iterator_close');
  late final _lightning_db_iterator_close =
      _lightning_db_iterator_closePtr.asFunction<int Function(int)>();

  KeyValueResult lightning_db_iterator_next(
    int handle,
  ) {
    return _lightning_db_iterator_next(
      handle,
    );
  }

  late final _lightning_db_iterator_nextPtr =
      _lookup<ffi.NativeFunction<KeyValueResult Function(ffi.Uint64)>>(
          'lightning_db_iterator_next');
  late final _lightning_db_iterator_next =
      _lightning_db_iterator_nextPtr.asFunction<KeyValueResult Function(int)>();

  int lightning_db_open(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Uint64> out_handle,
  ) {
    return _lightning_db_open(
      path,
      out_handle,
    );
  }

  late final _lightning_db_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint64>)>>('lightning_db_open');
  late final _lightning_db_open = _lightning_db_openPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>();

  int lightning_db_put(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    ffi.Pointer<ffi.Uint8> value,
    int value_len,
  ) {
    return _lightning_db_put(
      handle,
      key,
      key_len,
      value,
      value_len,
    );
  }

  late final _lightning_db_putPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>>('lightning_db_put');
  late final _lightning_db_put = _lightning_db_putPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int lightning_db_put_tx(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    ffi.Pointer<ffi.Uint8> value,
    int value_len,
  ) {
    return _lightning_db_put_tx(
      handle,
      key,
      key_len,
      value,
      value_len,
    );
  }

  late final _lightning_db_put_txPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>>('lightning_db_put_tx');
  late final _lightning_db_put_tx = _lightning_db_put_txPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int lightning_db_put_with_consistency(
    int handle,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    ffi.Pointer<ffi.Uint8> value,
    int value_len,
    int consistency_level,
  ) {
    return _lightning_db_put_with_consistency(
      handle,
      key,
      key_len,
      value,
      value_len,
      consistency_level,
    );
  }

  late final _lightning_db_put_with_consistencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Int32)>>('lightning_db_put_with_consistency');
  late final _lightning_db_put_with_consistency =
      _lightning_db_put_with_consistencyPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
              int, int)>();

  int lightning_db_scan(
    int db_handle,
    ffi.Pointer<ffi.Uint8> start_key,
    int start_key_len,
    ffi.Pointer<ffi.Uint8> end_key,
    int end_key_len,
    ffi.Pointer<ffi.Uint64> out_handle,
  ) {
    return _lightning_db_scan(
      db_handle,
      start_key,
      start_key_len,
      end_key,
      end_key_len,
      out_handle,
    );
  }

  late final _lightning_db_scanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint64>)>>('lightning_db_scan');
  late final _lightning_db_scan = _lightning_db_scanPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
          int, ffi.Pointer<ffi.Uint64>)>();

  int lightning_db_sync(
    int handle,
  ) {
    return _lightning_db_sync(
      handle,
    );
  }

  late final _lightning_db_syncPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>(
          'lightning_db_sync');
  late final _lightning_db_sync =
      _lightning_db_syncPtr.asFunction<int Function(int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final LightningDbBindings _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>
      get lightning_db_abort_transaction =>
          _library._lightning_db_abort_transactionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Uint64, ffi.Pointer<ffi.Uint64>)>>
      get lightning_db_begin_transaction =>
          _library._lightning_db_begin_transactionPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>
      get lightning_db_checkpoint => _library._lightning_db_checkpointPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      get lightning_db_clear_error => _library._lightning_db_clear_errorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>
      get lightning_db_close => _library._lightning_db_closePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>
      get lightning_db_commit_transaction =>
          _library._lightning_db_commit_transactionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>>
      get lightning_db_create => _library._lightning_db_createPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Uint64,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Uint64>)>> get lightning_db_create_with_config =>
      _library._lightning_db_create_with_configPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>>
      get lightning_db_delete => _library._lightning_db_deletePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>>
      get lightning_db_delete_tx => _library._lightning_db_delete_txPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ByteResult)>>
      get lightning_db_free_bytes => _library._lightning_db_free_bytesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KeyValueResult)>>
      get lightning_db_free_key_value =>
          _library._lightning_db_free_key_valuePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>
      get lightning_db_free_string => _library._lightning_db_free_stringPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ByteResult Function(
                  ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>>
      get lightning_db_get => _library._lightning_db_getPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      get lightning_db_get_last_error =>
          _library._lightning_db_get_last_errorPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.UintPtr)>>
      get lightning_db_get_last_error_buffer =>
          _library._lightning_db_get_last_error_bufferPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ByteResult Function(
                  ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr)>>
      get lightning_db_get_tx => _library._lightning_db_get_txPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ByteResult Function(
                  ffi.Uint64, ffi.Pointer<ffi.Uint8>, ffi.UintPtr, ffi.Int32)>>
      get lightning_db_get_with_consistency =>
          _library._lightning_db_get_with_consistencyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>> get lightning_db_init =>
      _library._lightning_db_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>
      get lightning_db_iterator_close =>
          _library._lightning_db_iterator_closePtr;
  ffi.Pointer<ffi.NativeFunction<KeyValueResult Function(ffi.Uint64)>>
      get lightning_db_iterator_next => _library._lightning_db_iterator_nextPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint64>)>>
      get lightning_db_open => _library._lightning_db_openPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>> get lightning_db_put =>
      _library._lightning_db_putPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr)>> get lightning_db_put_tx =>
      _library._lightning_db_put_txPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Int32)>> get lightning_db_put_with_consistency =>
      _library._lightning_db_put_with_consistencyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Uint64>)>> get lightning_db_scan =>
      _library._lightning_db_scanPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>
      get lightning_db_sync => _library._lightning_db_syncPtr;
}

/// Result structures
final class ByteResult extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> DATA;

  @ffi.UintPtr()
  external int LEN;

  @ffi.Int32()
  external int ERROR_CODE;
}

/// Enums from the original header
abstract class CompressionType {
  static const int CompressionTypeNone = 0;
  static const int CompressionTypeZstd = 1;
  static const int CompressionTypeLz4 = 2;
  static const int CompressionTypeSnappy = 3;
}

abstract class ConsistencyLevel {
  static const int ConsistencyLevelEventual = 0;
  static const int ConsistencyLevelStrong = 1;
}

abstract class ErrorCode {
  static const int ErrorCodeSuccess = 0;
  static const int ErrorCodeInvalidArgument = 1;
  static const int ErrorCodeDatabaseNotFound = 2;
  static const int ErrorCodeDatabaseExists = 3;
  static const int ErrorCodeTransactionNotFound = 4;
  static const int ErrorCodeTransactionConflict = 5;
  static const int ErrorCodeKeyNotFound = 6;
  static const int ErrorCodeIoError = 7;
  static const int ErrorCodeCorruptedData = 8;
  static const int ErrorCodeOutOfMemory = 9;
  static const int ErrorCodeUnknown = 999;
}

final class KeyValueResult extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> KEY;

  @ffi.UintPtr()
  external int KEY_LEN;

  external ffi.Pointer<ffi.Uint8> VALUE;

  @ffi.UintPtr()
  external int VALUE_LEN;

  @ffi.Int32()
  external int ERROR_CODE;
}

abstract class WalSyncMode {
  static const int WalSyncModeSync = 0;
  static const int WalSyncModePeriodic = 1;
  static const int WalSyncModeAsync = 2;
}
