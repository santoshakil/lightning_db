apiVersion: apps/v1
kind: Deployment
metadata:
  name: lightning-db
  namespace: lightning-db
  labels:
    app.kubernetes.io/name: lightning-db
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: lightning-db
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: lightning-db
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lightning-db
        app.kubernetes.io/version: "0.1.0"
        app.kubernetes.io/component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: lightning-db
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: lightning-db
        image: lightning-db:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: admin
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: LIGHTNING_DB_CONFIG
          value: "/app/config/lightning_db.toml"
        - name: LIGHTNING_DB_DATA_DIR
          value: "/app/data"
        - name: LIGHTNING_DB_LOG_DIR
          value: "/app/logs"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        volumeMounts:
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: tls-certs
          mountPath: /app/certs
          readOnly: true
        - name: scripts
          mountPath: /app/scripts
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: admin
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: admin
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: admin
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: lightning-db-data
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: lightning-db-config
          items:
          - key: lightning_db.toml
            path: lightning_db.toml
      - name: tls-certs
        secret:
          secretName: lightning-db-tls
      - name: scripts
        configMap:
          name: lightning-db-scripts
          defaultMode: 0755
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - lightning-db
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300