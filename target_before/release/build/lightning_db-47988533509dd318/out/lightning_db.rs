// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DatabaseConfig {
    /// Default: 4096
    #[prost(uint64, tag = "1")]
    pub page_size: u64,
    /// Default: 100MB
    #[prost(uint64, tag = "2")]
    pub cache_size: u64,
    /// Optional, 0 = unlimited
    #[prost(uint64, tag = "3")]
    pub mmap_size: u64,
    /// Default: true
    #[prost(bool, tag = "4")]
    pub compression_enabled: bool,
    /// Default: ZSTD
    #[prost(enumeration = "CompressionType", tag = "5")]
    pub compression: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct KeyValue {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "3")]
    pub version: u64,
    #[prost(uint64, tag = "4")]
    pub timestamp: u64,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PageHeader {
    /// 0x4C444200 ("LDB\0")
    #[prost(uint32, tag = "1")]
    pub magic: u32,
    /// Format version
    #[prost(uint32, tag = "2")]
    pub version: u32,
    /// 0=leaf, 1=internal, 2=overflow
    #[prost(uint32, tag = "3")]
    pub page_type: u32,
    /// CRC32
    #[prost(uint32, tag = "4")]
    pub checksum: u32,
    #[prost(uint32, tag = "5")]
    pub num_entries: u32,
    #[prost(uint32, tag = "6")]
    pub free_space: u32,
    /// For B+tree navigation
    #[prost(uint64, tag = "7")]
    pub right_sibling: u64,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CompressionType {
    None = 0,
    Zstd = 1,
    Lz4 = 2,
}
impl CompressionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "NONE",
            Self::Zstd => "ZSTD",
            Self::Lz4 => "LZ4",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "ZSTD" => Some(Self::Zstd),
            "LZ4" => Some(Self::Lz4),
            _ => None,
        }
    }
}
